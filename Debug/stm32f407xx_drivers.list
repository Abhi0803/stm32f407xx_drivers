
stm32f407xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002704  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  080028b4  080028b4  000128b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029e0  080029e0  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  080029e0  080029e0  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029e0  080029e0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029e0  080029e0  000129e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029e4  080029e4  000129e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080029e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000504  20000090  08002a78  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000594  08002a78  00020594  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000037c3  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000882  00000000  00000000  0002387d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001b0  00000000  00000000  00024100  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000168  00000000  00000000  000242b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003508  00000000  00000000  00024418  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001ecd  00000000  00000000  00027920  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000c9f8  00000000  00000000  000297ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000361e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010e0  00000000  00000000  00036260  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800289c 	.word	0x0800289c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	0800289c 	.word	0x0800289c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <GPIO_PClkCtrl>:


/*
 *  Peripheral Clock Setup
 */
void GPIO_PClkCtrl(GPIO_RegDef_t *pGPIOx, uint8_t STATE){
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	460b      	mov	r3, r1
 80002aa:	70fb      	strb	r3, [r7, #3]
	if(STATE == ENABLE)	{
 80002ac:	78fb      	ldrb	r3, [r7, #3]
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d162      	bne.n	8000378 <GPIO_PClkCtrl+0xd8>
		if(pGPIOx == GPIOA)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	4a65      	ldr	r2, [pc, #404]	; (800044c <GPIO_PClkCtrl+0x1ac>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d106      	bne.n	80002c8 <GPIO_PClkCtrl+0x28>
		{
			GPIOA_PCLK_EN();
 80002ba:	4b65      	ldr	r3, [pc, #404]	; (8000450 <GPIO_PClkCtrl+0x1b0>)
 80002bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002be:	4a64      	ldr	r2, [pc, #400]	; (8000450 <GPIO_PClkCtrl+0x1b0>)
 80002c0:	f043 0301 	orr.w	r3, r3, #1
 80002c4:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOH_PCLK_DI();
		}else if(pGPIOx == GPIOI){
			GPIOI_PCLK_DI();
		}
	}
}
 80002c6:	e0bc      	b.n	8000442 <GPIO_PClkCtrl+0x1a2>
		}else if (pGPIOx == GPIOB)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	4a62      	ldr	r2, [pc, #392]	; (8000454 <GPIO_PClkCtrl+0x1b4>)
 80002cc:	4293      	cmp	r3, r2
 80002ce:	d106      	bne.n	80002de <GPIO_PClkCtrl+0x3e>
			GPIOB_PCLK_EN();
 80002d0:	4b5f      	ldr	r3, [pc, #380]	; (8000450 <GPIO_PClkCtrl+0x1b0>)
 80002d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d4:	4a5e      	ldr	r2, [pc, #376]	; (8000450 <GPIO_PClkCtrl+0x1b0>)
 80002d6:	f043 0302 	orr.w	r3, r3, #2
 80002da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002dc:	e0b1      	b.n	8000442 <GPIO_PClkCtrl+0x1a2>
		}else if (pGPIOx == GPIOC)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	4a5d      	ldr	r2, [pc, #372]	; (8000458 <GPIO_PClkCtrl+0x1b8>)
 80002e2:	4293      	cmp	r3, r2
 80002e4:	d106      	bne.n	80002f4 <GPIO_PClkCtrl+0x54>
			GPIOC_PCLK_EN();
 80002e6:	4b5a      	ldr	r3, [pc, #360]	; (8000450 <GPIO_PClkCtrl+0x1b0>)
 80002e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ea:	4a59      	ldr	r2, [pc, #356]	; (8000450 <GPIO_PClkCtrl+0x1b0>)
 80002ec:	f043 0304 	orr.w	r3, r3, #4
 80002f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002f2:	e0a6      	b.n	8000442 <GPIO_PClkCtrl+0x1a2>
		}else if (pGPIOx == GPIOD)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4a59      	ldr	r2, [pc, #356]	; (800045c <GPIO_PClkCtrl+0x1bc>)
 80002f8:	4293      	cmp	r3, r2
 80002fa:	d106      	bne.n	800030a <GPIO_PClkCtrl+0x6a>
			GPIOD_PCLK_EN();
 80002fc:	4b54      	ldr	r3, [pc, #336]	; (8000450 <GPIO_PClkCtrl+0x1b0>)
 80002fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000300:	4a53      	ldr	r2, [pc, #332]	; (8000450 <GPIO_PClkCtrl+0x1b0>)
 8000302:	f043 0308 	orr.w	r3, r3, #8
 8000306:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000308:	e09b      	b.n	8000442 <GPIO_PClkCtrl+0x1a2>
		}else if (pGPIOx == GPIOE)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	4a54      	ldr	r2, [pc, #336]	; (8000460 <GPIO_PClkCtrl+0x1c0>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d106      	bne.n	8000320 <GPIO_PClkCtrl+0x80>
			GPIOE_PCLK_EN();
 8000312:	4b4f      	ldr	r3, [pc, #316]	; (8000450 <GPIO_PClkCtrl+0x1b0>)
 8000314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000316:	4a4e      	ldr	r2, [pc, #312]	; (8000450 <GPIO_PClkCtrl+0x1b0>)
 8000318:	f043 0310 	orr.w	r3, r3, #16
 800031c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800031e:	e090      	b.n	8000442 <GPIO_PClkCtrl+0x1a2>
		}else if (pGPIOx == GPIOF)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	4a50      	ldr	r2, [pc, #320]	; (8000464 <GPIO_PClkCtrl+0x1c4>)
 8000324:	4293      	cmp	r3, r2
 8000326:	d106      	bne.n	8000336 <GPIO_PClkCtrl+0x96>
			GPIOF_PCLK_EN();
 8000328:	4b49      	ldr	r3, [pc, #292]	; (8000450 <GPIO_PClkCtrl+0x1b0>)
 800032a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032c:	4a48      	ldr	r2, [pc, #288]	; (8000450 <GPIO_PClkCtrl+0x1b0>)
 800032e:	f043 0320 	orr.w	r3, r3, #32
 8000332:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000334:	e085      	b.n	8000442 <GPIO_PClkCtrl+0x1a2>
		}else if (pGPIOx == GPIOG)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	4a4b      	ldr	r2, [pc, #300]	; (8000468 <GPIO_PClkCtrl+0x1c8>)
 800033a:	4293      	cmp	r3, r2
 800033c:	d106      	bne.n	800034c <GPIO_PClkCtrl+0xac>
			GPIOG_PCLK_EN();
 800033e:	4b44      	ldr	r3, [pc, #272]	; (8000450 <GPIO_PClkCtrl+0x1b0>)
 8000340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000342:	4a43      	ldr	r2, [pc, #268]	; (8000450 <GPIO_PClkCtrl+0x1b0>)
 8000344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000348:	6313      	str	r3, [r2, #48]	; 0x30
}
 800034a:	e07a      	b.n	8000442 <GPIO_PClkCtrl+0x1a2>
		}else if (pGPIOx == GPIOH)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	4a47      	ldr	r2, [pc, #284]	; (800046c <GPIO_PClkCtrl+0x1cc>)
 8000350:	4293      	cmp	r3, r2
 8000352:	d106      	bne.n	8000362 <GPIO_PClkCtrl+0xc2>
			GPIOH_PCLK_EN();
 8000354:	4b3e      	ldr	r3, [pc, #248]	; (8000450 <GPIO_PClkCtrl+0x1b0>)
 8000356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000358:	4a3d      	ldr	r2, [pc, #244]	; (8000450 <GPIO_PClkCtrl+0x1b0>)
 800035a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800035e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000360:	e06f      	b.n	8000442 <GPIO_PClkCtrl+0x1a2>
		}else if (pGPIOx == GPIOI)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4a42      	ldr	r2, [pc, #264]	; (8000470 <GPIO_PClkCtrl+0x1d0>)
 8000366:	4293      	cmp	r3, r2
 8000368:	d16b      	bne.n	8000442 <GPIO_PClkCtrl+0x1a2>
			GPIOI_PCLK_EN();
 800036a:	4b39      	ldr	r3, [pc, #228]	; (8000450 <GPIO_PClkCtrl+0x1b0>)
 800036c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036e:	4a38      	ldr	r2, [pc, #224]	; (8000450 <GPIO_PClkCtrl+0x1b0>)
 8000370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000374:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000376:	e064      	b.n	8000442 <GPIO_PClkCtrl+0x1a2>
	else if(STATE == DISABLE){
 8000378:	78fb      	ldrb	r3, [r7, #3]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d161      	bne.n	8000442 <GPIO_PClkCtrl+0x1a2>
		if(pGPIOx == GPIOA){
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4a32      	ldr	r2, [pc, #200]	; (800044c <GPIO_PClkCtrl+0x1ac>)
 8000382:	4293      	cmp	r3, r2
 8000384:	d106      	bne.n	8000394 <GPIO_PClkCtrl+0xf4>
			GPIOA_PCLK_DI();
 8000386:	4b32      	ldr	r3, [pc, #200]	; (8000450 <GPIO_PClkCtrl+0x1b0>)
 8000388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038a:	4a31      	ldr	r2, [pc, #196]	; (8000450 <GPIO_PClkCtrl+0x1b0>)
 800038c:	f023 0301 	bic.w	r3, r3, #1
 8000390:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000392:	e056      	b.n	8000442 <GPIO_PClkCtrl+0x1a2>
		}else if(pGPIOx == GPIOB){
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4a2f      	ldr	r2, [pc, #188]	; (8000454 <GPIO_PClkCtrl+0x1b4>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d106      	bne.n	80003aa <GPIO_PClkCtrl+0x10a>
			GPIOB_PCLK_DI();
 800039c:	4b2c      	ldr	r3, [pc, #176]	; (8000450 <GPIO_PClkCtrl+0x1b0>)
 800039e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a0:	4a2b      	ldr	r2, [pc, #172]	; (8000450 <GPIO_PClkCtrl+0x1b0>)
 80003a2:	f023 0302 	bic.w	r3, r3, #2
 80003a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a8:	e04b      	b.n	8000442 <GPIO_PClkCtrl+0x1a2>
		}else if(pGPIOx == GPIOC){
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4a2a      	ldr	r2, [pc, #168]	; (8000458 <GPIO_PClkCtrl+0x1b8>)
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d106      	bne.n	80003c0 <GPIO_PClkCtrl+0x120>
			GPIOC_PCLK_DI();
 80003b2:	4b27      	ldr	r3, [pc, #156]	; (8000450 <GPIO_PClkCtrl+0x1b0>)
 80003b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b6:	4a26      	ldr	r2, [pc, #152]	; (8000450 <GPIO_PClkCtrl+0x1b0>)
 80003b8:	f023 0304 	bic.w	r3, r3, #4
 80003bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003be:	e040      	b.n	8000442 <GPIO_PClkCtrl+0x1a2>
		}else if(pGPIOx == GPIOD){
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	4a26      	ldr	r2, [pc, #152]	; (800045c <GPIO_PClkCtrl+0x1bc>)
 80003c4:	4293      	cmp	r3, r2
 80003c6:	d106      	bne.n	80003d6 <GPIO_PClkCtrl+0x136>
			GPIOD_PCLK_DI();
 80003c8:	4b21      	ldr	r3, [pc, #132]	; (8000450 <GPIO_PClkCtrl+0x1b0>)
 80003ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003cc:	4a20      	ldr	r2, [pc, #128]	; (8000450 <GPIO_PClkCtrl+0x1b0>)
 80003ce:	f023 0308 	bic.w	r3, r3, #8
 80003d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d4:	e035      	b.n	8000442 <GPIO_PClkCtrl+0x1a2>
		}else if(pGPIOx == GPIOE){
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4a21      	ldr	r2, [pc, #132]	; (8000460 <GPIO_PClkCtrl+0x1c0>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d106      	bne.n	80003ec <GPIO_PClkCtrl+0x14c>
			GPIOE_PCLK_DI();
 80003de:	4b1c      	ldr	r3, [pc, #112]	; (8000450 <GPIO_PClkCtrl+0x1b0>)
 80003e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e2:	4a1b      	ldr	r2, [pc, #108]	; (8000450 <GPIO_PClkCtrl+0x1b0>)
 80003e4:	f023 0310 	bic.w	r3, r3, #16
 80003e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ea:	e02a      	b.n	8000442 <GPIO_PClkCtrl+0x1a2>
		}else if(pGPIOx == GPIOF){
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4a1d      	ldr	r2, [pc, #116]	; (8000464 <GPIO_PClkCtrl+0x1c4>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d106      	bne.n	8000402 <GPIO_PClkCtrl+0x162>
			GPIOF_PCLK_DI();
 80003f4:	4b16      	ldr	r3, [pc, #88]	; (8000450 <GPIO_PClkCtrl+0x1b0>)
 80003f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f8:	4a15      	ldr	r2, [pc, #84]	; (8000450 <GPIO_PClkCtrl+0x1b0>)
 80003fa:	f023 0320 	bic.w	r3, r3, #32
 80003fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000400:	e01f      	b.n	8000442 <GPIO_PClkCtrl+0x1a2>
		}else if(pGPIOx == GPIOG){
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4a18      	ldr	r2, [pc, #96]	; (8000468 <GPIO_PClkCtrl+0x1c8>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d106      	bne.n	8000418 <GPIO_PClkCtrl+0x178>
			GPIOG_PCLK_DI();
 800040a:	4b11      	ldr	r3, [pc, #68]	; (8000450 <GPIO_PClkCtrl+0x1b0>)
 800040c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040e:	4a10      	ldr	r2, [pc, #64]	; (8000450 <GPIO_PClkCtrl+0x1b0>)
 8000410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000414:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000416:	e014      	b.n	8000442 <GPIO_PClkCtrl+0x1a2>
		}else if(pGPIOx == GPIOH){
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4a14      	ldr	r2, [pc, #80]	; (800046c <GPIO_PClkCtrl+0x1cc>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d106      	bne.n	800042e <GPIO_PClkCtrl+0x18e>
			GPIOH_PCLK_DI();
 8000420:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <GPIO_PClkCtrl+0x1b0>)
 8000422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000424:	4a0a      	ldr	r2, [pc, #40]	; (8000450 <GPIO_PClkCtrl+0x1b0>)
 8000426:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800042a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800042c:	e009      	b.n	8000442 <GPIO_PClkCtrl+0x1a2>
		}else if(pGPIOx == GPIOI){
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	4a0f      	ldr	r2, [pc, #60]	; (8000470 <GPIO_PClkCtrl+0x1d0>)
 8000432:	4293      	cmp	r3, r2
 8000434:	d105      	bne.n	8000442 <GPIO_PClkCtrl+0x1a2>
			GPIOI_PCLK_DI();
 8000436:	4b06      	ldr	r3, [pc, #24]	; (8000450 <GPIO_PClkCtrl+0x1b0>)
 8000438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043a:	4a05      	ldr	r2, [pc, #20]	; (8000450 <GPIO_PClkCtrl+0x1b0>)
 800043c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000440:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000442:	bf00      	nop
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr
 800044c:	40020000 	.word	0x40020000
 8000450:	40023800 	.word	0x40023800
 8000454:	40020400 	.word	0x40020400
 8000458:	40020800 	.word	0x40020800
 800045c:	40020c00 	.word	0x40020c00
 8000460:	40021000 	.word	0x40021000
 8000464:	40021400 	.word	0x40021400
 8000468:	40021800 	.word	0x40021800
 800046c:	40021c00 	.word	0x40021c00
 8000470:	40022000 	.word	0x40022000

08000474 <GPIO_Init>:

/*
 *  Peripheral Init and DeInit Setup
 */
void GPIO_Init(GPIO_HANDLE_t *pGPIOHandle){
 8000474:	b580      	push	{r7, lr}
 8000476:	b086      	sub	sp, #24
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 800047c:	2300      	movs	r3, #0
 800047e:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PClkCtrl(pGPIOHandle->pGPIOx, ENABLE);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	2101      	movs	r1, #1
 8000486:	4618      	mov	r0, r3
 8000488:	f7ff ff0a 	bl	80002a0 <GPIO_PClkCtrl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	795b      	ldrb	r3, [r3, #5]
 8000490:	2b03      	cmp	r3, #3
 8000492:	d820      	bhi.n	80004d6 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	795b      	ldrb	r3, [r3, #5]
 8000498:	461a      	mov	r2, r3
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	791b      	ldrb	r3, [r3, #4]
 800049e:	005b      	lsls	r3, r3, #1
 80004a0:	fa02 f303 	lsl.w	r3, r2, r3
 80004a4:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->GPIO_MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	681a      	ldr	r2, [r3, #0]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	791b      	ldrb	r3, [r3, #4]
 80004b0:	005b      	lsls	r3, r3, #1
 80004b2:	2103      	movs	r1, #3
 80004b4:	fa01 f303 	lsl.w	r3, r1, r3
 80004b8:	43db      	mvns	r3, r3
 80004ba:	4619      	mov	r1, r3
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	400a      	ands	r2, r1
 80004c2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->GPIO_MODER |= temp; //setting
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	6819      	ldr	r1, [r3, #0]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	697a      	ldr	r2, [r7, #20]
 80004d0:	430a      	orrs	r2, r1
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	e0c1      	b.n	800065a <GPIO_Init+0x1e6>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	795b      	ldrb	r3, [r3, #5]
 80004da:	2b04      	cmp	r3, #4
 80004dc:	d117      	bne.n	800050e <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->EXTI_FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004de:	4b47      	ldr	r3, [pc, #284]	; (80005fc <GPIO_Init+0x188>)
 80004e0:	68db      	ldr	r3, [r3, #12]
 80004e2:	687a      	ldr	r2, [r7, #4]
 80004e4:	7912      	ldrb	r2, [r2, #4]
 80004e6:	4611      	mov	r1, r2
 80004e8:	2201      	movs	r2, #1
 80004ea:	408a      	lsls	r2, r1
 80004ec:	4611      	mov	r1, r2
 80004ee:	4a43      	ldr	r2, [pc, #268]	; (80005fc <GPIO_Init+0x188>)
 80004f0:	430b      	orrs	r3, r1
 80004f2:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->EXTI_RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004f4:	4b41      	ldr	r3, [pc, #260]	; (80005fc <GPIO_Init+0x188>)
 80004f6:	689b      	ldr	r3, [r3, #8]
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	7912      	ldrb	r2, [r2, #4]
 80004fc:	4611      	mov	r1, r2
 80004fe:	2201      	movs	r2, #1
 8000500:	408a      	lsls	r2, r1
 8000502:	43d2      	mvns	r2, r2
 8000504:	4611      	mov	r1, r2
 8000506:	4a3d      	ldr	r2, [pc, #244]	; (80005fc <GPIO_Init+0x188>)
 8000508:	400b      	ands	r3, r1
 800050a:	6093      	str	r3, [r2, #8]
 800050c:	e035      	b.n	800057a <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	795b      	ldrb	r3, [r3, #5]
 8000512:	2b05      	cmp	r3, #5
 8000514:	d117      	bne.n	8000546 <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->EXTI_RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000516:	4b39      	ldr	r3, [pc, #228]	; (80005fc <GPIO_Init+0x188>)
 8000518:	689b      	ldr	r3, [r3, #8]
 800051a:	687a      	ldr	r2, [r7, #4]
 800051c:	7912      	ldrb	r2, [r2, #4]
 800051e:	4611      	mov	r1, r2
 8000520:	2201      	movs	r2, #1
 8000522:	408a      	lsls	r2, r1
 8000524:	4611      	mov	r1, r2
 8000526:	4a35      	ldr	r2, [pc, #212]	; (80005fc <GPIO_Init+0x188>)
 8000528:	430b      	orrs	r3, r1
 800052a:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->EXTI_FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800052c:	4b33      	ldr	r3, [pc, #204]	; (80005fc <GPIO_Init+0x188>)
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	7912      	ldrb	r2, [r2, #4]
 8000534:	4611      	mov	r1, r2
 8000536:	2201      	movs	r2, #1
 8000538:	408a      	lsls	r2, r1
 800053a:	43d2      	mvns	r2, r2
 800053c:	4611      	mov	r1, r2
 800053e:	4a2f      	ldr	r2, [pc, #188]	; (80005fc <GPIO_Init+0x188>)
 8000540:	400b      	ands	r3, r1
 8000542:	60d3      	str	r3, [r2, #12]
 8000544:	e019      	b.n	800057a <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	795b      	ldrb	r3, [r3, #5]
 800054a:	2b06      	cmp	r3, #6
 800054c:	d115      	bne.n	800057a <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->EXTI_RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800054e:	4b2b      	ldr	r3, [pc, #172]	; (80005fc <GPIO_Init+0x188>)
 8000550:	689b      	ldr	r3, [r3, #8]
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	7912      	ldrb	r2, [r2, #4]
 8000556:	4611      	mov	r1, r2
 8000558:	2201      	movs	r2, #1
 800055a:	408a      	lsls	r2, r1
 800055c:	4611      	mov	r1, r2
 800055e:	4a27      	ldr	r2, [pc, #156]	; (80005fc <GPIO_Init+0x188>)
 8000560:	430b      	orrs	r3, r1
 8000562:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->EXTI_FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000564:	4b25      	ldr	r3, [pc, #148]	; (80005fc <GPIO_Init+0x188>)
 8000566:	68db      	ldr	r3, [r3, #12]
 8000568:	687a      	ldr	r2, [r7, #4]
 800056a:	7912      	ldrb	r2, [r2, #4]
 800056c:	4611      	mov	r1, r2
 800056e:	2201      	movs	r2, #1
 8000570:	408a      	lsls	r2, r1
 8000572:	4611      	mov	r1, r2
 8000574:	4a21      	ldr	r2, [pc, #132]	; (80005fc <GPIO_Init+0x188>)
 8000576:	430b      	orrs	r3, r1
 8000578:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	791b      	ldrb	r3, [r3, #4]
 800057e:	089b      	lsrs	r3, r3, #2
 8000580:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	791b      	ldrb	r3, [r3, #4]
 8000586:	f003 0303 	and.w	r3, r3, #3
 800058a:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a1b      	ldr	r2, [pc, #108]	; (8000600 <GPIO_Init+0x18c>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d044      	beq.n	8000620 <GPIO_Init+0x1ac>
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a1a      	ldr	r2, [pc, #104]	; (8000604 <GPIO_Init+0x190>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d02b      	beq.n	80005f8 <GPIO_Init+0x184>
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a18      	ldr	r2, [pc, #96]	; (8000608 <GPIO_Init+0x194>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d024      	beq.n	80005f4 <GPIO_Init+0x180>
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a17      	ldr	r2, [pc, #92]	; (800060c <GPIO_Init+0x198>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d01d      	beq.n	80005f0 <GPIO_Init+0x17c>
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a15      	ldr	r2, [pc, #84]	; (8000610 <GPIO_Init+0x19c>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d016      	beq.n	80005ec <GPIO_Init+0x178>
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a14      	ldr	r2, [pc, #80]	; (8000614 <GPIO_Init+0x1a0>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d00f      	beq.n	80005e8 <GPIO_Init+0x174>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a12      	ldr	r2, [pc, #72]	; (8000618 <GPIO_Init+0x1a4>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d008      	beq.n	80005e4 <GPIO_Init+0x170>
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a11      	ldr	r2, [pc, #68]	; (800061c <GPIO_Init+0x1a8>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d101      	bne.n	80005e0 <GPIO_Init+0x16c>
 80005dc:	2307      	movs	r3, #7
 80005de:	e020      	b.n	8000622 <GPIO_Init+0x1ae>
 80005e0:	2308      	movs	r3, #8
 80005e2:	e01e      	b.n	8000622 <GPIO_Init+0x1ae>
 80005e4:	2306      	movs	r3, #6
 80005e6:	e01c      	b.n	8000622 <GPIO_Init+0x1ae>
 80005e8:	2305      	movs	r3, #5
 80005ea:	e01a      	b.n	8000622 <GPIO_Init+0x1ae>
 80005ec:	2304      	movs	r3, #4
 80005ee:	e018      	b.n	8000622 <GPIO_Init+0x1ae>
 80005f0:	2303      	movs	r3, #3
 80005f2:	e016      	b.n	8000622 <GPIO_Init+0x1ae>
 80005f4:	2302      	movs	r3, #2
 80005f6:	e014      	b.n	8000622 <GPIO_Init+0x1ae>
 80005f8:	2301      	movs	r3, #1
 80005fa:	e012      	b.n	8000622 <GPIO_Init+0x1ae>
 80005fc:	40013c00 	.word	0x40013c00
 8000600:	40020000 	.word	0x40020000
 8000604:	40020400 	.word	0x40020400
 8000608:	40020800 	.word	0x40020800
 800060c:	40020c00 	.word	0x40020c00
 8000610:	40021000 	.word	0x40021000
 8000614:	40021400 	.word	0x40021400
 8000618:	40021800 	.word	0x40021800
 800061c:	40021c00 	.word	0x40021c00
 8000620:	2300      	movs	r3, #0
 8000622:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000624:	4b59      	ldr	r3, [pc, #356]	; (800078c <GPIO_Init+0x318>)
 8000626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000628:	4a58      	ldr	r2, [pc, #352]	; (800078c <GPIO_Init+0x318>)
 800062a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800062e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->SYSCFG_EXTICR[temp1] = portcode << ( temp2 * 4);
 8000630:	7c7a      	ldrb	r2, [r7, #17]
 8000632:	7cbb      	ldrb	r3, [r7, #18]
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	fa02 f103 	lsl.w	r1, r2, r3
 800063a:	4a55      	ldr	r2, [pc, #340]	; (8000790 <GPIO_Init+0x31c>)
 800063c:	7cfb      	ldrb	r3, [r7, #19]
 800063e:	3302      	adds	r3, #2
 8000640:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->EXTI_IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000644:	4b53      	ldr	r3, [pc, #332]	; (8000794 <GPIO_Init+0x320>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	7912      	ldrb	r2, [r2, #4]
 800064c:	4611      	mov	r1, r2
 800064e:	2201      	movs	r2, #1
 8000650:	408a      	lsls	r2, r1
 8000652:	4611      	mov	r1, r2
 8000654:	4a4f      	ldr	r2, [pc, #316]	; (8000794 <GPIO_Init+0x320>)
 8000656:	430b      	orrs	r3, r1
 8000658:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	799b      	ldrb	r3, [r3, #6]
 800065e:	461a      	mov	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	791b      	ldrb	r3, [r3, #4]
 8000664:	005b      	lsls	r3, r3, #1
 8000666:	fa02 f303 	lsl.w	r3, r2, r3
 800066a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->GPIO_OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	689a      	ldr	r2, [r3, #8]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	791b      	ldrb	r3, [r3, #4]
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	2103      	movs	r1, #3
 800067a:	fa01 f303 	lsl.w	r3, r1, r3
 800067e:	43db      	mvns	r3, r3
 8000680:	4619      	mov	r1, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	400a      	ands	r2, r1
 8000688:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->GPIO_OSPEEDR |= temp;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	6899      	ldr	r1, [r3, #8]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	697a      	ldr	r2, [r7, #20]
 8000696:	430a      	orrs	r2, r1
 8000698:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	79db      	ldrb	r3, [r3, #7]
 800069e:	461a      	mov	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	791b      	ldrb	r3, [r3, #4]
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	fa02 f303 	lsl.w	r3, r2, r3
 80006aa:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->GPIO_PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	68da      	ldr	r2, [r3, #12]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	791b      	ldrb	r3, [r3, #4]
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	2103      	movs	r1, #3
 80006ba:	fa01 f303 	lsl.w	r3, r1, r3
 80006be:	43db      	mvns	r3, r3
 80006c0:	4619      	mov	r1, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	400a      	ands	r2, r1
 80006c8:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->GPIO_PUPDR |= temp;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	68d9      	ldr	r1, [r3, #12]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	697a      	ldr	r2, [r7, #20]
 80006d6:	430a      	orrs	r2, r1
 80006d8:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	7a1b      	ldrb	r3, [r3, #8]
 80006de:	461a      	mov	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	791b      	ldrb	r3, [r3, #4]
 80006e4:	fa02 f303 	lsl.w	r3, r2, r3
 80006e8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->GPIO_OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	685a      	ldr	r2, [r3, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	791b      	ldrb	r3, [r3, #4]
 80006f4:	4619      	mov	r1, r3
 80006f6:	2301      	movs	r3, #1
 80006f8:	408b      	lsls	r3, r1
 80006fa:	43db      	mvns	r3, r3
 80006fc:	4619      	mov	r1, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	400a      	ands	r2, r1
 8000704:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->GPIO_OTYPER |= temp;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	6859      	ldr	r1, [r3, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	697a      	ldr	r2, [r7, #20]
 8000712:	430a      	orrs	r2, r1
 8000714:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	795b      	ldrb	r3, [r3, #5]
 800071a:	2b02      	cmp	r3, #2
 800071c:	d131      	bne.n	8000782 <GPIO_Init+0x30e>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	791b      	ldrb	r3, [r3, #4]
 8000722:	08db      	lsrs	r3, r3, #3
 8000724:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	791b      	ldrb	r3, [r3, #4]
 800072a:	f003 0307 	and.w	r3, r3, #7
 800072e:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	7c3a      	ldrb	r2, [r7, #16]
 8000736:	3208      	adds	r2, #8
 8000738:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	220f      	movs	r2, #15
 8000742:	fa02 f303 	lsl.w	r3, r2, r3
 8000746:	43db      	mvns	r3, r3
 8000748:	4618      	mov	r0, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	7c3a      	ldrb	r2, [r7, #16]
 8000750:	4001      	ands	r1, r0
 8000752:	3208      	adds	r2, #8
 8000754:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	7c3a      	ldrb	r2, [r7, #16]
 800075e:	3208      	adds	r2, #8
 8000760:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	7a5b      	ldrb	r3, [r3, #9]
 8000768:	461a      	mov	r2, r3
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	fa02 f303 	lsl.w	r3, r2, r3
 8000772:	4618      	mov	r0, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	7c3a      	ldrb	r2, [r7, #16]
 800077a:	4301      	orrs	r1, r0
 800077c:	3208      	adds	r2, #8
 800077e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000782:	bf00      	nop
 8000784:	3718      	adds	r7, #24
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800
 8000790:	40013800 	.word	0x40013800
 8000794:	40013c00 	.word	0x40013c00

08000798 <GPIO_ReadPin>:
/*


 *  Peripheral Data Read And Write Setup
 */
uint8_t GPIO_ReadPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	460b      	mov	r3, r1
 80007a2:	70fb      	strb	r3, [r7, #3]
	uint8_t	value;
	value = (uint8_t )((pGPIOx->GPIO_IDR  >> PinNumber) & 0x00000001 ) ;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	691a      	ldr	r2, [r3, #16]
 80007a8:	78fb      	ldrb	r3, [r7, #3]
 80007aa:	fa22 f303 	lsr.w	r3, r2, r3
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	f003 0301 	and.w	r3, r3, #1
 80007b4:	73fb      	strb	r3, [r7, #15]
	return value;
 80007b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3714      	adds	r7, #20
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
	...

080007c4 <RCC_GetPCLK1Value>:
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->RCC_CFGR >> 2) & 0x3);
 80007ca:	4b25      	ldr	r3, [pc, #148]	; (8000860 <RCC_GetPCLK1Value+0x9c>)
 80007cc:	689b      	ldr	r3, [r3, #8]
 80007ce:	089b      	lsrs	r3, r3, #2
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	f003 0303 	and.w	r3, r3, #3
 80007d6:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 80007d8:	7a7b      	ldrb	r3, [r7, #9]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d102      	bne.n	80007e4 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 80007de:	4b21      	ldr	r3, [pc, #132]	; (8000864 <RCC_GetPCLK1Value+0xa0>)
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	e00b      	b.n	80007fc <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 80007e4:	7a7b      	ldrb	r3, [r7, #9]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d102      	bne.n	80007f0 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 80007ea:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <RCC_GetPCLK1Value+0xa4>)
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	e005      	b.n	80007fc <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 80007f0:	7a7b      	ldrb	r3, [r7, #9]
 80007f2:	2b02      	cmp	r3, #2
 80007f4:	d102      	bne.n	80007fc <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 80007f6:	f000 f88d 	bl	8000914 <RCC_GetPLLOutputClock>
 80007fa:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->RCC_CFGR >> 4 ) & 0xF);
 80007fc:	4b18      	ldr	r3, [pc, #96]	; (8000860 <RCC_GetPCLK1Value+0x9c>)
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	091b      	lsrs	r3, r3, #4
 8000802:	b2db      	uxtb	r3, r3
 8000804:	f003 030f 	and.w	r3, r3, #15
 8000808:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 800080a:	7a3b      	ldrb	r3, [r7, #8]
 800080c:	2b07      	cmp	r3, #7
 800080e:	d802      	bhi.n	8000816 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000810:	2301      	movs	r3, #1
 8000812:	72fb      	strb	r3, [r7, #11]
 8000814:	e005      	b.n	8000822 <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 8000816:	7a3b      	ldrb	r3, [r7, #8]
 8000818:	3b08      	subs	r3, #8
 800081a:	4a14      	ldr	r2, [pc, #80]	; (800086c <RCC_GetPCLK1Value+0xa8>)
 800081c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000820:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->RCC_CFGR >> 10 ) & 0x7);
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <RCC_GetPCLK1Value+0x9c>)
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	0a9b      	lsrs	r3, r3, #10
 8000828:	b2db      	uxtb	r3, r3
 800082a:	f003 0307 	and.w	r3, r3, #7
 800082e:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8000830:	7a3b      	ldrb	r3, [r7, #8]
 8000832:	2b03      	cmp	r3, #3
 8000834:	d802      	bhi.n	800083c <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8000836:	2301      	movs	r3, #1
 8000838:	72bb      	strb	r3, [r7, #10]
 800083a:	e004      	b.n	8000846 <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 800083c:	7a3b      	ldrb	r3, [r7, #8]
 800083e:	3b04      	subs	r3, #4
 8000840:	4a0b      	ldr	r2, [pc, #44]	; (8000870 <RCC_GetPCLK1Value+0xac>)
 8000842:	5cd3      	ldrb	r3, [r2, r3]
 8000844:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 8000846:	7afb      	ldrb	r3, [r7, #11]
 8000848:	68fa      	ldr	r2, [r7, #12]
 800084a:	fbb2 f2f3 	udiv	r2, r2, r3
 800084e:	7abb      	ldrb	r3, [r7, #10]
 8000850:	fbb2 f3f3 	udiv	r3, r2, r3
 8000854:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000856:	687b      	ldr	r3, [r7, #4]
}
 8000858:	4618      	mov	r0, r3
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40023800 	.word	0x40023800
 8000864:	00f42400 	.word	0x00f42400
 8000868:	007a1200 	.word	0x007a1200
 800086c:	20000000 	.word	0x20000000
 8000870:	20000010 	.word	0x20000010

08000874 <RCC_GetPCLK2Value>:
 *
 * @Note              -

 */
uint32_t RCC_GetPCLK2Value(void)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
	uint32_t SystemClock=0,tmp,pclk2;
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
	uint8_t clk_src = ( RCC->RCC_CFGR >> 2) & 0X3;
 800087e:	4b20      	ldr	r3, [pc, #128]	; (8000900 <RCC_GetPCLK2Value+0x8c>)
 8000880:	689b      	ldr	r3, [r3, #8]
 8000882:	089b      	lsrs	r3, r3, #2
 8000884:	b2db      	uxtb	r3, r3
 8000886:	f003 0303 	and.w	r3, r3, #3
 800088a:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp,apb2p;

	if(clk_src == 0)
 800088c:	7a7b      	ldrb	r3, [r7, #9]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d102      	bne.n	8000898 <RCC_GetPCLK2Value+0x24>
	{
		SystemClock = 16000000;
 8000892:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <RCC_GetPCLK2Value+0x90>)
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	e001      	b.n	800089c <RCC_GetPCLK2Value+0x28>
	}else
	{
		SystemClock = 8000000;
 8000898:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <RCC_GetPCLK2Value+0x94>)
 800089a:	60fb      	str	r3, [r7, #12]
	}
	tmp = (RCC->RCC_CFGR >> 4 ) & 0xF;
 800089c:	4b18      	ldr	r3, [pc, #96]	; (8000900 <RCC_GetPCLK2Value+0x8c>)
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	091b      	lsrs	r3, r3, #4
 80008a2:	f003 030f 	and.w	r3, r3, #15
 80008a6:	607b      	str	r3, [r7, #4]

	if(tmp < 0x08)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2b07      	cmp	r3, #7
 80008ac:	d802      	bhi.n	80008b4 <RCC_GetPCLK2Value+0x40>
	{
		ahbp = 1;
 80008ae:	2301      	movs	r3, #1
 80008b0:	72fb      	strb	r3, [r7, #11]
 80008b2:	e005      	b.n	80008c0 <RCC_GetPCLK2Value+0x4c>
	}else
	{
       ahbp = AHB_PreScaler[tmp-8];
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3b08      	subs	r3, #8
 80008b8:	4a14      	ldr	r2, [pc, #80]	; (800090c <RCC_GetPCLK2Value+0x98>)
 80008ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008be:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->RCC_CFGR >> 13 ) & 0x7;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <RCC_GetPCLK2Value+0x8c>)
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	0b5b      	lsrs	r3, r3, #13
 80008c6:	f003 0307 	and.w	r3, r3, #7
 80008ca:	607b      	str	r3, [r7, #4]
	if(tmp < 0x04)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2b03      	cmp	r3, #3
 80008d0:	d802      	bhi.n	80008d8 <RCC_GetPCLK2Value+0x64>
	{
		apb2p = 1;
 80008d2:	2301      	movs	r3, #1
 80008d4:	72bb      	strb	r3, [r7, #10]
 80008d6:	e004      	b.n	80008e2 <RCC_GetPCLK2Value+0x6e>
	}else
	{
		apb2p = APB1_PreScaler[tmp-4];
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3b04      	subs	r3, #4
 80008dc:	4a0c      	ldr	r2, [pc, #48]	; (8000910 <RCC_GetPCLK2Value+0x9c>)
 80008de:	5cd3      	ldrb	r3, [r2, r3]
 80008e0:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp )/ apb2p;
 80008e2:	7afb      	ldrb	r3, [r7, #11]
 80008e4:	68fa      	ldr	r2, [r7, #12]
 80008e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80008ea:	7abb      	ldrb	r3, [r7, #10]
 80008ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f0:	603b      	str	r3, [r7, #0]

	return pclk2;
 80008f2:	683b      	ldr	r3, [r7, #0]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800
 8000904:	00f42400 	.word	0x00f42400
 8000908:	007a1200 	.word	0x007a1200
 800090c:	20000000 	.word	0x20000000
 8000910:	20000010 	.word	0x20000010

08000914 <RCC_GetPLLOutputClock>:

uint32_t  RCC_GetPLLOutputClock()
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

	return 0;
 8000918:	2300      	movs	r3, #0
}
 800091a:	4618      	mov	r0, r3
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr
	...

08000924 <USART_PClkCtrl>:


/*
 *  Peripheral Clock Setup
 */
void USART_PClkCtrl(USART_RegDef_t *pUSARTx, uint8_t STATE){
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	460b      	mov	r3, r1
 800092e:	70fb      	strb	r3, [r7, #3]

	if(STATE == ENABLE){
 8000930:	78fb      	ldrb	r3, [r7, #3]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d141      	bne.n	80009ba <USART_PClkCtrl+0x96>

			if(pUSARTx == USART1){
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4a44      	ldr	r2, [pc, #272]	; (8000a4c <USART_PClkCtrl+0x128>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d106      	bne.n	800094c <USART_PClkCtrl+0x28>

				USART1_PCLK_EN();
 800093e:	4b44      	ldr	r3, [pc, #272]	; (8000a50 <USART_PClkCtrl+0x12c>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	4a43      	ldr	r2, [pc, #268]	; (8000a50 <USART_PClkCtrl+0x12c>)
 8000944:	f043 0310 	orr.w	r3, r3, #16
 8000948:	6453      	str	r3, [r2, #68]	; 0x44
			}else if(pUSARTx == USART6){

				USART6_PCLK_DI();
			}
		}
}
 800094a:	e07a      	b.n	8000a42 <USART_PClkCtrl+0x11e>
			}else if(pUSARTx == USART2){
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a41      	ldr	r2, [pc, #260]	; (8000a54 <USART_PClkCtrl+0x130>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d106      	bne.n	8000962 <USART_PClkCtrl+0x3e>
				USART2_PCLK_EN();
 8000954:	4b3e      	ldr	r3, [pc, #248]	; (8000a50 <USART_PClkCtrl+0x12c>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000958:	4a3d      	ldr	r2, [pc, #244]	; (8000a50 <USART_PClkCtrl+0x12c>)
 800095a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800095e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000960:	e06f      	b.n	8000a42 <USART_PClkCtrl+0x11e>
			}else if(pUSARTx == USART3){
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a3c      	ldr	r2, [pc, #240]	; (8000a58 <USART_PClkCtrl+0x134>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d106      	bne.n	8000978 <USART_PClkCtrl+0x54>
				USART3_PCLK_EN();
 800096a:	4b39      	ldr	r3, [pc, #228]	; (8000a50 <USART_PClkCtrl+0x12c>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	4a38      	ldr	r2, [pc, #224]	; (8000a50 <USART_PClkCtrl+0x12c>)
 8000970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000974:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000976:	e064      	b.n	8000a42 <USART_PClkCtrl+0x11e>
			}else if(pUSARTx == UART4){
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4a38      	ldr	r2, [pc, #224]	; (8000a5c <USART_PClkCtrl+0x138>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d106      	bne.n	800098e <USART_PClkCtrl+0x6a>
				UART4_PCLK_EN();
 8000980:	4b33      	ldr	r3, [pc, #204]	; (8000a50 <USART_PClkCtrl+0x12c>)
 8000982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000984:	4a32      	ldr	r2, [pc, #200]	; (8000a50 <USART_PClkCtrl+0x12c>)
 8000986:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800098a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800098c:	e059      	b.n	8000a42 <USART_PClkCtrl+0x11e>
			}else if(pUSARTx == UART5){
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a33      	ldr	r2, [pc, #204]	; (8000a60 <USART_PClkCtrl+0x13c>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d106      	bne.n	80009a4 <USART_PClkCtrl+0x80>
				UART5_PCLK_EN();
 8000996:	4b2e      	ldr	r3, [pc, #184]	; (8000a50 <USART_PClkCtrl+0x12c>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	4a2d      	ldr	r2, [pc, #180]	; (8000a50 <USART_PClkCtrl+0x12c>)
 800099c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009a0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009a2:	e04e      	b.n	8000a42 <USART_PClkCtrl+0x11e>
			}else if(pUSARTx == USART6){
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4a2f      	ldr	r2, [pc, #188]	; (8000a64 <USART_PClkCtrl+0x140>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d14a      	bne.n	8000a42 <USART_PClkCtrl+0x11e>
				USART6_PCLK_EN();
 80009ac:	4b28      	ldr	r3, [pc, #160]	; (8000a50 <USART_PClkCtrl+0x12c>)
 80009ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b0:	4a27      	ldr	r2, [pc, #156]	; (8000a50 <USART_PClkCtrl+0x12c>)
 80009b2:	f043 0320 	orr.w	r3, r3, #32
 80009b6:	6453      	str	r3, [r2, #68]	; 0x44
}
 80009b8:	e043      	b.n	8000a42 <USART_PClkCtrl+0x11e>
		}else if(STATE == DISABLE){
 80009ba:	78fb      	ldrb	r3, [r7, #3]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d140      	bne.n	8000a42 <USART_PClkCtrl+0x11e>
			if(pUSARTx == USART1){
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a22      	ldr	r2, [pc, #136]	; (8000a4c <USART_PClkCtrl+0x128>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d106      	bne.n	80009d6 <USART_PClkCtrl+0xb2>
				USART1_PCLK_DI();
 80009c8:	4b21      	ldr	r3, [pc, #132]	; (8000a50 <USART_PClkCtrl+0x12c>)
 80009ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009cc:	4a20      	ldr	r2, [pc, #128]	; (8000a50 <USART_PClkCtrl+0x12c>)
 80009ce:	f023 0310 	bic.w	r3, r3, #16
 80009d2:	6453      	str	r3, [r2, #68]	; 0x44
}
 80009d4:	e035      	b.n	8000a42 <USART_PClkCtrl+0x11e>
			}else if(pUSARTx == USART2){
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a1e      	ldr	r2, [pc, #120]	; (8000a54 <USART_PClkCtrl+0x130>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d106      	bne.n	80009ec <USART_PClkCtrl+0xc8>
				USART2_PCLK_DI();
 80009de:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <USART_PClkCtrl+0x12c>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	4a1b      	ldr	r2, [pc, #108]	; (8000a50 <USART_PClkCtrl+0x12c>)
 80009e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80009e8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009ea:	e02a      	b.n	8000a42 <USART_PClkCtrl+0x11e>
			}else if(pUSARTx == USART3){
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a1a      	ldr	r2, [pc, #104]	; (8000a58 <USART_PClkCtrl+0x134>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d106      	bne.n	8000a02 <USART_PClkCtrl+0xde>
				USART3_PCLK_DI();
 80009f4:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <USART_PClkCtrl+0x12c>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f8:	4a15      	ldr	r2, [pc, #84]	; (8000a50 <USART_PClkCtrl+0x12c>)
 80009fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009fe:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a00:	e01f      	b.n	8000a42 <USART_PClkCtrl+0x11e>
			}else if(pUSARTx == UART4){
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a15      	ldr	r2, [pc, #84]	; (8000a5c <USART_PClkCtrl+0x138>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d106      	bne.n	8000a18 <USART_PClkCtrl+0xf4>
				UART4_PCLK_DI();
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <USART_PClkCtrl+0x12c>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	4a10      	ldr	r2, [pc, #64]	; (8000a50 <USART_PClkCtrl+0x12c>)
 8000a10:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000a14:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a16:	e014      	b.n	8000a42 <USART_PClkCtrl+0x11e>
			}else if(pUSARTx == UART5){
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a11      	ldr	r2, [pc, #68]	; (8000a60 <USART_PClkCtrl+0x13c>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d106      	bne.n	8000a2e <USART_PClkCtrl+0x10a>
				UART5_PCLK_DI();
 8000a20:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <USART_PClkCtrl+0x12c>)
 8000a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a24:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <USART_PClkCtrl+0x12c>)
 8000a26:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000a2a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a2c:	e009      	b.n	8000a42 <USART_PClkCtrl+0x11e>
			}else if(pUSARTx == USART6){
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a0c      	ldr	r2, [pc, #48]	; (8000a64 <USART_PClkCtrl+0x140>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d105      	bne.n	8000a42 <USART_PClkCtrl+0x11e>
				USART6_PCLK_DI();
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <USART_PClkCtrl+0x12c>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	4a05      	ldr	r2, [pc, #20]	; (8000a50 <USART_PClkCtrl+0x12c>)
 8000a3c:	f023 0320 	bic.w	r3, r3, #32
 8000a40:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr
 8000a4c:	40011000 	.word	0x40011000
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40004400 	.word	0x40004400
 8000a58:	40004800 	.word	0x40004800
 8000a5c:	40004c00 	.word	0x40004c00
 8000a60:	40005000 	.word	0x40005000
 8000a64:	40011400 	.word	0x40011400

08000a68 <USART_Init>:


/*
 *  Peripheral Init and DeInit Setup
 */
void USART_Init(USART_HANDLE_t *pUSARTHandle){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]


	//Temporary variable
	uint32_t tempreg=0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]

/******************************** Configuration of CR1******************************************/

	//Implement the code to enable the Clock for given USART peripheral
//
	USART_PClkCtrl(pUSARTHandle->pUSARTx, ENABLE);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2101      	movs	r1, #1
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff ff52 	bl	8000924 <USART_PClkCtrl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	791b      	ldrb	r3, [r3, #4]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d104      	bne.n	8000a92 <USART_Init+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		tempreg|= (1 << USART_CR1_RE);
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f043 0304 	orr.w	r3, r3, #4
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	e010      	b.n	8000ab4 <USART_Init+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	791b      	ldrb	r3, [r3, #4]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d104      	bne.n	8000aa4 <USART_Init+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE );
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	f043 0308 	orr.w	r3, r3, #8
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	e007      	b.n	8000ab4 <USART_Init+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	791b      	ldrb	r3, [r3, #4]
 8000aa8:	2b02      	cmp	r3, #2
 8000aaa:	d103      	bne.n	8000ab4 <USART_Init+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f043 030c 	orr.w	r3, r3, #12
 8000ab2:	60fb      	str	r3, [r7, #12]
	}

    //Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WORDLEN << USART_CR1_M;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	7b5b      	ldrb	r3, [r3, #13]
 8000ab8:	031b      	lsls	r3, r3, #12
 8000aba:	461a      	mov	r2, r3
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	60fb      	str	r3, [r7, #12]


    //Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.USART_PARITY == USART_PARITY_EN_EVEN)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	7b9b      	ldrb	r3, [r3, #14]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d104      	bne.n	8000ad4 <USART_Init+0x6c>
	{
		//Implement the code to enale the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	e00b      	b.n	8000aec <USART_Init+0x84>

		//Implement the code to enable EVEN parity

		//Not required because by default EVEN parity will be selected once you enable the parity control

	}else if (pUSARTHandle->USART_Config.USART_PARITY == USART_PARITY_EN_ODD )
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	7b9b      	ldrb	r3, [r3, #14]
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d107      	bne.n	8000aec <USART_Init+0x84>
	{
		//Implement the code to enable the parity control
	    tempreg |= ( 1 << USART_CR1_PCE);
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ae2:	60fb      	str	r3, [r7, #12]

	    //Implement the code to enable ODD parity
	    tempreg |= ( 1 << USART_CR1_PS);
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aea:	60fb      	str	r3, [r7, #12]

	}

   //Program the CR1 register
	pUSARTHandle->pUSARTx->USART_CR1 = tempreg;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	68fa      	ldr	r2, [r7, #12]
 8000af2:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/

	tempreg=0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_STOPBits << USART_CR2_STOP;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	7b1b      	ldrb	r3, [r3, #12]
 8000afc:	031b      	lsls	r3, r3, #12
 8000afe:	461a      	mov	r2, r3
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->USART_CR2 = tempreg;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	tempreg=0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowCtrl == USART_HW_FLOW_CTRL_CTS)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	7bdb      	ldrb	r3, [r3, #15]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d104      	bne.n	8000b24 <USART_Init+0xbc>
	{
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	e010      	b.n	8000b46 <USART_Init+0xde>


	}else if (pUSARTHandle->USART_Config.USART_HWFlowCtrl == USART_HW_FLOW_CTRL_RTS)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	7bdb      	ldrb	r3, [r3, #15]
 8000b28:	2b02      	cmp	r3, #2
 8000b2a:	d104      	bne.n	8000b36 <USART_Init+0xce>
	{
		//Implement the code to enable RTS flow control
		tempreg |= ( 1 << USART_CR3_RTSE);
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	e007      	b.n	8000b46 <USART_Init+0xde>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowCtrl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	7bdb      	ldrb	r3, [r3, #15]
 8000b3a:	2b03      	cmp	r3, #3
 8000b3c:	d103      	bne.n	8000b46 <USART_Init+0xde>
	{
		//Implement the code to enable both CTS and RTS Flow control
		//// TODO
		tempreg |= ( ( 1 << USART_CR3_CTSE) | ( 1 << USART_CR3_RTSE) );
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000b44:	60fb      	str	r3, [r7, #12]
	}


	pUSARTHandle->pUSARTx->USART_CR3 = tempreg;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	615a      	str	r2, [r3, #20]

/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	//We will cover this in the lecture. No action required here
	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Buad);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	4619      	mov	r1, r3
 8000b58:	4610      	mov	r0, r2
 8000b5a:	f000 fac5 	bl	80010e8 <USART_SetBaudRate>
}
 8000b5e:	bf00      	nop
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <USART_SendData>:


/*
 *  Peripheral Data Read And Write Setup
 */
void USART_SendData(USART_HANDLE_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len){
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b086      	sub	sp, #24
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	60f8      	str	r0, [r7, #12]
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;
	   //Loop over until "Len" number of bytes are transferred
		for(uint32_t i = 0 ; i < Len; i++)
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
 8000b76:	e031      	b.n	8000bdc <USART_SendData+0x76>
		{
			//Implement the code to wait until TXE flag is set in the SR
			while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8000b78:	bf00      	nop
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2180      	movs	r1, #128	; 0x80
 8000b80:	4618      	mov	r0, r3
 8000b82:	f000 fa82 	bl	800108a <USART_GetFlagStatus>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d0f6      	beq.n	8000b7a <USART_SendData+0x14>

	         //Check the USART_WordLength item for 9BIT or 8BIT in a frame
			if(pUSARTHandle->USART_Config.USART_WORDLEN == USART_WORDLEN_9BITS)
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	7b5b      	ldrb	r3, [r3, #13]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d118      	bne.n	8000bc6 <USART_SendData+0x60>
			{
				//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
				pdata = (uint16_t*) pTxBuffer;
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	613b      	str	r3, [r7, #16]
				pUSARTHandle->pUSARTx->USART_DR = (*pdata & (uint16_t)0x01FF);
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	881b      	ldrh	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ba6:	605a      	str	r2, [r3, #4]

				//check for USART_ParityControl
				if(pUSARTHandle->USART_Config.USART_PARITY == USART_PARITY_DISABLE)
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	7b9b      	ldrb	r3, [r3, #14]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d106      	bne.n	8000bbe <USART_SendData+0x58>
				{
					//No parity is used in this transfer. so, 9bits of user data will be sent
					//Implement the code to increment pTxBuffer twice
					pTxBuffer++;
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	60bb      	str	r3, [r7, #8]
					pTxBuffer++;
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	e00b      	b.n	8000bd6 <USART_SendData+0x70>
				}
				else
				{
					//Parity bit is used in this transfer . so , 8bits of user data will be sent
					//The 9th bit will be replaced by parity bit by the hardware
					pTxBuffer++;
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	e007      	b.n	8000bd6 <USART_SendData+0x70>
				}
			}
			else
			{
				//This is 8bit data transfer
				pUSARTHandle->pUSARTx->USART_DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	781a      	ldrb	r2, [r3, #0]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]

				//Implement the code to increment the buffer address
				pTxBuffer++;
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	60bb      	str	r3, [r7, #8]
		for(uint32_t i = 0 ; i < Len; i++)
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	697a      	ldr	r2, [r7, #20]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d3c9      	bcc.n	8000b78 <USART_SendData+0x12>
			}
		}

		//Implement the code to wait till TC flag is set in the SR
		while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000be4:	bf00      	nop
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2140      	movs	r1, #64	; 0x40
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 fa4c 	bl	800108a <USART_GetFlagStatus>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d0f6      	beq.n	8000be6 <USART_SendData+0x80>
}
 8000bf8:	bf00      	nop
 8000bfa:	3718      	adds	r7, #24
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <USART_RecieveDataIT>:





uint8_t USART_RecieveDataIT(USART_HANDLE_t *pUSARTHandle,uint8_t *pRxBuffer, uint32_t Len){
 8000c00:	b480      	push	{r7}
 8000c02:	b087      	sub	sp, #28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]

	uint8_t rxstate = pUSARTHandle->RxState;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c10:	75fb      	strb	r3, [r7, #23]

	if(rxstate != USART_BUSY_IN_RX)
 8000c12:	7dfb      	ldrb	r3, [r7, #23]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d010      	beq.n	8000c3a <USART_RecieveDataIT+0x3a>
	{
		pUSARTHandle->RxLen = Len;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	61da      	str	r2, [r3, #28]
		pUSARTHandle->pRxBuffer = pRxBuffer;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	68ba      	ldr	r2, [r7, #8]
 8000c22:	615a      	str	r2, [r3, #20]
		pUSARTHandle->RxState = USART_BUSY_IN_RX;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	2201      	movs	r2, #1
 8000c28:	625a      	str	r2, [r3, #36]	; 0x24

		//Implement the code to enable interrupt for RXNE
		pUSARTHandle->pUSARTx->USART_CR1 |= (1 << USART_CR1_RXNEIE);
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	68da      	ldr	r2, [r3, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f042 0220 	orr.w	r2, r2, #32
 8000c38:	60da      	str	r2, [r3, #12]

	}

	return rxstate;
 8000c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	371c      	adds	r7, #28
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr
	...

08000c48 <USART_IRQITConfig>:


/*
 *  Peripheral IRQ Configuration and ISR Handling Setup
 */
void USART_IRQITConfig(uint8_t IRQNumber,  uint8_t IRQEN_DI){
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	460a      	mov	r2, r1
 8000c52:	71fb      	strb	r3, [r7, #7]
 8000c54:	4613      	mov	r3, r2
 8000c56:	71bb      	strb	r3, [r7, #6]
	if(IRQEN_DI == ENABLE){
 8000c58:	79bb      	ldrb	r3, [r7, #6]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d133      	bne.n	8000cc6 <USART_IRQITConfig+0x7e>
		if(IRQNumber <= 31){
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	2b1f      	cmp	r3, #31
 8000c62:	d80a      	bhi.n	8000c7a <USART_IRQITConfig+0x32>
			// ISER0 is Configured
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000c64:	4b34      	ldr	r3, [pc, #208]	; (8000d38 <USART_IRQITConfig+0xf0>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	79fa      	ldrb	r2, [r7, #7]
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c70:	4611      	mov	r1, r2
 8000c72:	4a31      	ldr	r2, [pc, #196]	; (8000d38 <USART_IRQITConfig+0xf0>)
 8000c74:	430b      	orrs	r3, r1
 8000c76:	6013      	str	r3, [r2, #0]
			*NVIC_ICER2 |= (1 << ( IRQNumber % 64 ) );
		}
	}


}
 8000c78:	e059      	b.n	8000d2e <USART_IRQITConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64){
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	2b1f      	cmp	r3, #31
 8000c7e:	d90f      	bls.n	8000ca0 <USART_IRQITConfig+0x58>
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	2b3f      	cmp	r3, #63	; 0x3f
 8000c84:	d80c      	bhi.n	8000ca0 <USART_IRQITConfig+0x58>
			*NVIC_ISER1 |= (1 << ( IRQNumber % 32 ) );
 8000c86:	4b2d      	ldr	r3, [pc, #180]	; (8000d3c <USART_IRQITConfig+0xf4>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	79fa      	ldrb	r2, [r7, #7]
 8000c8c:	f002 021f 	and.w	r2, r2, #31
 8000c90:	2101      	movs	r1, #1
 8000c92:	fa01 f202 	lsl.w	r2, r1, r2
 8000c96:	4611      	mov	r1, r2
 8000c98:	4a28      	ldr	r2, [pc, #160]	; (8000d3c <USART_IRQITConfig+0xf4>)
 8000c9a:	430b      	orrs	r3, r1
 8000c9c:	6013      	str	r3, [r2, #0]
 8000c9e:	e046      	b.n	8000d2e <USART_IRQITConfig+0xe6>
		}else if(IRQNumber >= 64 && IRQNumber < 96){
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	2b3f      	cmp	r3, #63	; 0x3f
 8000ca4:	d943      	bls.n	8000d2e <USART_IRQITConfig+0xe6>
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	2b5f      	cmp	r3, #95	; 0x5f
 8000caa:	d840      	bhi.n	8000d2e <USART_IRQITConfig+0xe6>
			*NVIC_ISER2 |= (1 << ( IRQNumber % 64 ) );
 8000cac:	4b24      	ldr	r3, [pc, #144]	; (8000d40 <USART_IRQITConfig+0xf8>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	79fa      	ldrb	r2, [r7, #7]
 8000cb2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cbc:	4611      	mov	r1, r2
 8000cbe:	4a20      	ldr	r2, [pc, #128]	; (8000d40 <USART_IRQITConfig+0xf8>)
 8000cc0:	430b      	orrs	r3, r1
 8000cc2:	6013      	str	r3, [r2, #0]
}
 8000cc4:	e033      	b.n	8000d2e <USART_IRQITConfig+0xe6>
		if(IRQNumber <= 31){
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	2b1f      	cmp	r3, #31
 8000cca:	d80a      	bhi.n	8000ce2 <USART_IRQITConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000ccc:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <USART_IRQITConfig+0xfc>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	79fa      	ldrb	r2, [r7, #7]
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fa01 f202 	lsl.w	r2, r1, r2
 8000cd8:	4611      	mov	r1, r2
 8000cda:	4a1a      	ldr	r2, [pc, #104]	; (8000d44 <USART_IRQITConfig+0xfc>)
 8000cdc:	430b      	orrs	r3, r1
 8000cde:	6013      	str	r3, [r2, #0]
}
 8000ce0:	e025      	b.n	8000d2e <USART_IRQITConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64){
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b1f      	cmp	r3, #31
 8000ce6:	d90f      	bls.n	8000d08 <USART_IRQITConfig+0xc0>
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	2b3f      	cmp	r3, #63	; 0x3f
 8000cec:	d80c      	bhi.n	8000d08 <USART_IRQITConfig+0xc0>
			*NVIC_ICER1 |= (1 << ( IRQNumber % 32 ) );
 8000cee:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <USART_IRQITConfig+0x100>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	79fa      	ldrb	r2, [r7, #7]
 8000cf4:	f002 021f 	and.w	r2, r2, #31
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8000cfe:	4611      	mov	r1, r2
 8000d00:	4a11      	ldr	r2, [pc, #68]	; (8000d48 <USART_IRQITConfig+0x100>)
 8000d02:	430b      	orrs	r3, r1
 8000d04:	6013      	str	r3, [r2, #0]
 8000d06:	e012      	b.n	8000d2e <USART_IRQITConfig+0xe6>
		}else if(IRQNumber >= 64 && IRQNumber < 96){
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	2b3f      	cmp	r3, #63	; 0x3f
 8000d0c:	d90f      	bls.n	8000d2e <USART_IRQITConfig+0xe6>
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	2b5f      	cmp	r3, #95	; 0x5f
 8000d12:	d80c      	bhi.n	8000d2e <USART_IRQITConfig+0xe6>
			*NVIC_ICER2 |= (1 << ( IRQNumber % 64 ) );
 8000d14:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <USART_IRQITConfig+0x104>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	79fa      	ldrb	r2, [r7, #7]
 8000d1a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000d1e:	2101      	movs	r1, #1
 8000d20:	fa01 f202 	lsl.w	r2, r1, r2
 8000d24:	4611      	mov	r1, r2
 8000d26:	4a09      	ldr	r2, [pc, #36]	; (8000d4c <USART_IRQITConfig+0x104>)
 8000d28:	430b      	orrs	r3, r1
 8000d2a:	6013      	str	r3, [r2, #0]
}
 8000d2c:	e7ff      	b.n	8000d2e <USART_IRQITConfig+0xe6>
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr
 8000d38:	e000e100 	.word	0xe000e100
 8000d3c:	e000e104 	.word	0xe000e104
 8000d40:	e000e108 	.word	0xe000e108
 8000d44:	e000e180 	.word	0xe000e180
 8000d48:	e000e184 	.word	0xe000e184
 8000d4c:	e000e188 	.word	0xe000e188

08000d50 <USART_IRQHandling>:





void USART_IRQHandling(USART_HANDLE_t *pUSARTHandle){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	uint16_t *pdata;

/*************************Check for TC flag ********************************************/

    //Implement the code to check the state of TC bit in the SR
	temp1 = pUSARTHandle->pUSARTx->USART_SR & ( 1 << USART_SR_TC);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d62:	617b      	str	r3, [r7, #20]

	 //Implement the code to check the state of TCEIE bit
	temp2 = pUSARTHandle->pUSARTx->USART_CR1 & ( 1 << USART_CR1_TCIE);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d6e:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2 )
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d01f      	beq.n	8000db6 <USART_IRQHandling+0x66>
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d01c      	beq.n	8000db6 <USART_IRQHandling+0x66>
	{
		//this interrupt is because of TC

		//close transmission and call application callback if TxLen is zero
		if ( pUSARTHandle->TxState == USART_BUSY_IN_TX)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6a1b      	ldr	r3, [r3, #32]
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d118      	bne.n	8000db6 <USART_IRQHandling+0x66>
		{
			//Check the TxLen . If it is zero then close the data transmission
			if(! pUSARTHandle->TxLen )
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d114      	bne.n	8000db6 <USART_IRQHandling+0x66>
			{
				//Implement the code to clear the TC flag
				pUSARTHandle->pUSARTx->USART_SR &= ~( 1 << USART_SR_TC);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d9a:	601a      	str	r2, [r3, #0]

				//Implement the code to clear the TCIE control bit

				//Reset the application state
				pUSARTHandle->TxState = USART_READY;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	621a      	str	r2, [r3, #32]

				//Reset Buffer address to NULL
				pUSARTHandle->pTxBuffer = NULL;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]

				//Reset the length to zero
				pUSARTHandle->TxLen = 0;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]

				//Call the application call back with event USART_EVENT_TX_CMPLT
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_TX_CMPLT);
 8000dae:	2100      	movs	r1, #0
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f000 faf1 	bl	8001398 <USART_ApplicationEventCallback>
	}

/*************************Check for TXE flag ********************************************/

	//Implement the code to check the state of TXE bit in the SR
	temp1 = pUSARTHandle->pUSARTx->USART_SR & ( 1 << USART_SR_TXE);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dc0:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of TXEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->USART_CR1 & ( 1 << USART_CR1_TXEIE);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dcc:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2 )
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d054      	beq.n	8000e7e <USART_IRQHandling+0x12e>
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d051      	beq.n	8000e7e <USART_IRQHandling+0x12e>
	{
		//this interrupt is because of TXE

		if(pUSARTHandle->TxState == USART_BUSY_IN_TX)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6a1b      	ldr	r3, [r3, #32]
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d14d      	bne.n	8000e7e <USART_IRQHandling+0x12e>
		{
			//Keep sending data until Txlen reaches to zero
			if(pUSARTHandle->TxLen > 0)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d03d      	beq.n	8000e66 <USART_IRQHandling+0x116>
			{
				//Check the USART_WordLength item for 9BIT or 8BIT in a frame
				if(pUSARTHandle->USART_Config.USART_WORDLEN == USART_WORDLEN_9BITS)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	7b5b      	ldrb	r3, [r3, #13]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d129      	bne.n	8000e46 <USART_IRQHandling+0xf6>
				{
					//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
					pdata = (uint16_t*) pUSARTHandle->pTxBuffer;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	691b      	ldr	r3, [r3, #16]
 8000df6:	60fb      	str	r3, [r7, #12]
					pUSARTHandle->pUSARTx->USART_DR = (*pdata & (uint16_t)0x01FF);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000e06:	605a      	str	r2, [r3, #4]

					//check for USART_ParityControl
					if(pUSARTHandle->USART_Config.USART_PARITY == USART_PARITY_DISABLE)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	7b9b      	ldrb	r3, [r3, #14]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d10f      	bne.n	8000e30 <USART_IRQHandling+0xe0>
					{
						//No parity is used in this transfer , so 9bits of user data will be sent
						//Implement the code to increment pTxBuffer twice
						pUSARTHandle->pTxBuffer++;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	691b      	ldr	r3, [r3, #16]
 8000e14:	1c5a      	adds	r2, r3, #1
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	611a      	str	r2, [r3, #16]
						pUSARTHandle->pTxBuffer++;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	691b      	ldr	r3, [r3, #16]
 8000e1e:	1c5a      	adds	r2, r3, #1
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen-=2;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	1e9a      	subs	r2, r3, #2
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	619a      	str	r2, [r3, #24]
 8000e2e:	e01a      	b.n	8000e66 <USART_IRQHandling+0x116>
					}
					else
					{
						//Parity bit is used in this transfer . so 8bits of user data will be sent
						//The 9th bit will be replaced by parity bit by the hardware
						pUSARTHandle->pTxBuffer++;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	691b      	ldr	r3, [r3, #16]
 8000e34:	1c5a      	adds	r2, r3, #1
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen-=1;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	1e5a      	subs	r2, r3, #1
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	619a      	str	r2, [r3, #24]
 8000e44:	e00f      	b.n	8000e66 <USART_IRQHandling+0x116>
					}
				}
				else
				{
					//This is 8bit data transfer
					pUSARTHandle->pUSARTx->USART_DR = (*pUSARTHandle->pTxBuffer  & (uint8_t)0xFF);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	691b      	ldr	r3, [r3, #16]
 8000e4a:	781a      	ldrb	r2, [r3, #0]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]

					//Implement the code to increment the buffer address
					pUSARTHandle->pTxBuffer++;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	691b      	ldr	r3, [r3, #16]
 8000e56:	1c5a      	adds	r2, r3, #1
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	611a      	str	r2, [r3, #16]
					pUSARTHandle->TxLen-=1;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	1e5a      	subs	r2, r3, #1
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	619a      	str	r2, [r3, #24]
				}

			}
			if (pUSARTHandle->TxLen == 0 )
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	699b      	ldr	r3, [r3, #24]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d107      	bne.n	8000e7e <USART_IRQHandling+0x12e>
			{
				//TxLen is zero
				//Implement the code to clear the TXEIE bit (disable interrupt for TXE flag )
				pUSARTHandle->pUSARTx->USART_CR1 &= ~( 1 << USART_CR1_TXEIE);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	68da      	ldr	r2, [r3, #12]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e7c:	60da      	str	r2, [r3, #12]
		}
	}

/*************************Check for RXNE flag ********************************************/

	temp1 = pUSARTHandle->pUSARTx->USART_SR & ( 1 << USART_SR_RXNE);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f003 0320 	and.w	r3, r3, #32
 8000e88:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->USART_CR1 & ( 1 << USART_CR1_RXNEIE);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	f003 0320 	and.w	r3, r3, #32
 8000e94:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2 )
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d071      	beq.n	8000f80 <USART_IRQHandling+0x230>
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d06e      	beq.n	8000f80 <USART_IRQHandling+0x230>
	{
		//this interrupt is because of rxne
		if(pUSARTHandle->RxState == USART_BUSY_IN_RX)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d16a      	bne.n	8000f80 <USART_IRQHandling+0x230>
		{
			if(pUSARTHandle->RxLen > 0)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d053      	beq.n	8000f5a <USART_IRQHandling+0x20a>
			{
				//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
				if(pUSARTHandle->USART_Config.USART_WORDLEN == USART_WORDLEN_9BITS)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	7b5b      	ldrb	r3, [r3, #13]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d12f      	bne.n	8000f1a <USART_IRQHandling+0x1ca>
				{
					//We are going to receive 9bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.USART_PARITY == USART_PARITY_DISABLE)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	7b9b      	ldrb	r3, [r3, #14]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d119      	bne.n	8000ef6 <USART_IRQHandling+0x1a6>
					{
						//No parity is used , so all 9bits will be of user data

						//read only first 9 bits so mask the DR with 0x01FF
						*((uint16_t*) pUSARTHandle->pRxBuffer) = (pUSARTHandle->pUSARTx->USART_DR  & (uint16_t)0x01FF);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	801a      	strh	r2, [r3, #0]

						//Now increment the pRxBuffer two times
						pUSARTHandle->pRxBuffer++;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	1c5a      	adds	r2, r3, #1
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	615a      	str	r2, [r3, #20]
						pUSARTHandle->pRxBuffer++;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	695b      	ldr	r3, [r3, #20]
 8000ee4:	1c5a      	adds	r2, r3, #1
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	615a      	str	r2, [r3, #20]
						pUSARTHandle->RxLen-=2;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	1e9a      	subs	r2, r3, #2
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	61da      	str	r2, [r3, #28]
 8000ef4:	e031      	b.n	8000f5a <USART_IRQHandling+0x20a>
					}
					else
					{
						//Parity is used, so 8bits will be of user data and 1 bit is parity
						 *pUSARTHandle->pRxBuffer = (pUSARTHandle->pUSARTx->USART_DR  & (uint8_t)0xFF);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	695b      	ldr	r3, [r3, #20]
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	701a      	strb	r2, [r3, #0]
						 pUSARTHandle->pRxBuffer++;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	695b      	ldr	r3, [r3, #20]
 8000f08:	1c5a      	adds	r2, r3, #1
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	615a      	str	r2, [r3, #20]
						 pUSARTHandle->RxLen-=1;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	1e5a      	subs	r2, r3, #1
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	61da      	str	r2, [r3, #28]
 8000f18:	e01f      	b.n	8000f5a <USART_IRQHandling+0x20a>
				else
				{
					//We are going to receive 8bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.USART_PARITY == USART_PARITY_DISABLE)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	7b9b      	ldrb	r3, [r3, #14]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d107      	bne.n	8000f32 <USART_IRQHandling+0x1e2>
					{
						//No parity is used , so all 8bits will be of user data

						//read 8 bits from DR
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->USART_DR  & (uint8_t)0xFF);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	695b      	ldr	r3, [r3, #20]
 8000f2c:	b2d2      	uxtb	r2, r2
 8000f2e:	701a      	strb	r2, [r3, #0]
 8000f30:	e009      	b.n	8000f46 <USART_IRQHandling+0x1f6>
					else
					{
						//Parity is used, so , 7 bits will be of user data and 1 bit is parity

						//read only 7 bits , hence mask the DR with 0X7F
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->USART_DR  & (uint8_t)0x7F);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000f42:	b2d2      	uxtb	r2, r2
 8000f44:	701a      	strb	r2, [r3, #0]

					}

					//Now , increment the pRxBuffer
					pUSARTHandle->pRxBuffer++;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	1c5a      	adds	r2, r3, #1
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	615a      	str	r2, [r3, #20]
					 pUSARTHandle->RxLen-=1;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	69db      	ldr	r3, [r3, #28]
 8000f54:	1e5a      	subs	r2, r3, #1
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	61da      	str	r2, [r3, #28]
				}


			}//if of >0

			if(! pUSARTHandle->RxLen)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d10e      	bne.n	8000f80 <USART_IRQHandling+0x230>
			{
				//disable the rxne
				pUSARTHandle->pUSARTx->USART_CR1 &= ~( 1 << USART_CR1_RXNEIE );
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	68da      	ldr	r2, [r3, #12]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f022 0220 	bic.w	r2, r2, #32
 8000f70:	60da      	str	r2, [r3, #12]
				pUSARTHandle->RxState = USART_READY;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	625a      	str	r2, [r3, #36]	; 0x24
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_RX_CMPLT);
 8000f78:	2101      	movs	r1, #1
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 fa0c 	bl	8001398 <USART_ApplicationEventCallback>

/*************************Check for CTS flag ********************************************/
//Note : CTS feature is not applicable for UART4 and UART5

	//Implement the code to check the status of CTS bit in the SR
	temp1 = pUSARTHandle->pUSARTx->USART_SR & ( 1 << USART_SR_CTS);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f8a:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of CTSE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->USART_CR3 & ( 1 << USART_CR3_CTSE);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f96:	613b      	str	r3, [r7, #16]

	//Implement the code to check the state of CTSIE bit in CR3 (This bit is not available for UART4 & UART5.)
	temp3 = pUSARTHandle->pUSARTx->USART_CR3 & ( 1 << USART_CR3_CTSIE);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fa2:	60bb      	str	r3, [r7, #8]


	if(temp1  && temp2 )
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d00e      	beq.n	8000fc8 <USART_IRQHandling+0x278>
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d00b      	beq.n	8000fc8 <USART_IRQHandling+0x278>
	{
		//Implement the code to clear the CTS flag in SR
		pUSARTHandle->pUSARTx->USART_SR &=  ~( 1 << USART_SR_CTS);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000fbe:	601a      	str	r2, [r3, #0]

		//this interrupt is because of cts
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_CTS);
 8000fc0:	2103      	movs	r1, #3
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 f9e8 	bl	8001398 <USART_ApplicationEventCallback>
	}

/*************************Check for IDLE detection flag ********************************************/

	//Implement the code to check the status of IDLE flag bit in the SR
	temp1 = pUSARTHandle->pUSARTx->USART_SR & ( 1 << USART_SR_IDLE);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0310 	and.w	r3, r3, #16
 8000fd2:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of IDLEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->USART_CR1 & ( 1 << USART_CR1_IDLEIE);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	f003 0310 	and.w	r3, r3, #16
 8000fde:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2)
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d00f      	beq.n	8001006 <USART_IRQHandling+0x2b6>
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d00c      	beq.n	8001006 <USART_IRQHandling+0x2b6>
	{
		//Implement the code to clear the IDLE flag. Refer to the RM to understand the clear sequence
		temp1 = pUSARTHandle->pUSARTx->USART_SR &= ~( 1 << USART_SR_IDLE);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	6812      	ldr	r2, [r2, #0]
 8000ff6:	f023 0310 	bic.w	r3, r3, #16
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	617b      	str	r3, [r7, #20]

		//this interrupt is because of idle
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_IDLE);
 8000ffe:	2102      	movs	r1, #2
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 f9c9 	bl	8001398 <USART_ApplicationEventCallback>
	}

/*************************Check for Overrun detection flag ********************************************/

	//Implement the code to check the status of ORE flag  in the SR
	temp1 = pUSARTHandle->pUSARTx->USART_SR & USART_SR_ORE;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	617b      	str	r3, [r7, #20]

	//Implement the code to check the status of RXNEIE  bit in the CR1
	temp2 = pUSARTHandle->pUSARTx->USART_CR1 & USART_CR1_RXNEIE;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	f003 0305 	and.w	r3, r3, #5
 800101c:	613b      	str	r3, [r7, #16]


	if(temp1  && temp2 )
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d006      	beq.n	8001032 <USART_IRQHandling+0x2e2>
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <USART_IRQHandling+0x2e2>
	{
		//Need not to clear the ORE flag here, instead give an api for the application to clear the ORE flag .

		//this interrupt is because of Overrun error
		USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 800102a:	2107      	movs	r1, #7
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f000 f9b3 	bl	8001398 <USART_ApplicationEventCallback>

//Noise Flag, Overrun error and Framing Error in multibuffer communication
//We dont discuss multibuffer communication in this course. please refer to the RM
//The blow code will get executed in only if multibuffer mode is used.

	temp2 =  pUSARTHandle->pUSARTx->USART_CR3 & ( 1 << USART_CR3_EIE) ;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	695b      	ldr	r3, [r3, #20]
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	613b      	str	r3, [r7, #16]

	if(temp2 )
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d01e      	beq.n	8001082 <USART_IRQHandling+0x332>
	{
		temp1 = pUSARTHandle->pUSARTx->USART_SR;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	617b      	str	r3, [r7, #20]
		if(temp1 & ( 1 << USART_SR_FE))
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <USART_IRQHandling+0x30e>
			/*
				This bit is set by hardware when a de-synchronization, excessive noise or a break character
				is detected. It is cleared by a software sequence (an read to the USART_SR register
				followed by a read to the USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_FE);
 8001056:	2105      	movs	r1, #5
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f000 f99d 	bl	8001398 <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_SR_NF) )
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <USART_IRQHandling+0x320>
			/*
				This bit is set by hardware when noise is detected on a received frame. It is cleared by a
				software sequence (an read to the USART_SR register followed by a read to the
				USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_NE);
 8001068:	2106      	movs	r1, #6
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 f994 	bl	8001398 <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_SR_ORE) )
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	f003 0308 	and.w	r3, r3, #8
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <USART_IRQHandling+0x332>
		{
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 800107a:	2107      	movs	r1, #7
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 f98b 	bl	8001398 <USART_ApplicationEventCallback>
		}
	}


}
 8001082:	bf00      	nop
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <USART_GetFlagStatus>:
/*
 * 	Other Peripheral API Setup
 */
// Get the Flag Status Of the Flag Given
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx , uint32_t FlagName)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
 8001092:	6039      	str	r1, [r7, #0]
	if(pUSARTx->USART_SR & FlagName)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	4013      	ands	r3, r2
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <USART_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e000      	b.n	80010a6 <USART_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr

080010b0 <USART_PCtrl>:




// USART ENABLE OR DISABLE
void USART_PCtrl(USART_RegDef_t *pUSARTx, uint8_t STATE){
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	70fb      	strb	r3, [r7, #3]
	if(STATE == ENABLE){
 80010bc:	78fb      	ldrb	r3, [r7, #3]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d106      	bne.n	80010d0 <USART_PCtrl+0x20>

		pUSARTx->USART_CR1 |= (1 << USART_CR1_UE);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	60da      	str	r2, [r3, #12]
	}else{

		pUSARTx->USART_CR1 &= ~(1 << USART_CR1_UE);

	}
}
 80010ce:	e005      	b.n	80010dc <USART_PCtrl+0x2c>
		pUSARTx->USART_CR1 &= ~(1 << USART_CR1_UE);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	60da      	str	r2, [r3, #12]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr
	...

080010e8 <USART_SetBaudRate>:




void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

  uint32_t tempreg=0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]

  //Get the value of APB bus clock in to the variable PCLKx
  if(pUSARTx == USART1 || pUSARTx == USART6)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a31      	ldr	r2, [pc, #196]	; (80011c0 <USART_SetBaudRate+0xd8>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d003      	beq.n	8001106 <USART_SetBaudRate+0x1e>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a30      	ldr	r2, [pc, #192]	; (80011c4 <USART_SetBaudRate+0xdc>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d103      	bne.n	800110e <USART_SetBaudRate+0x26>
  {
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 8001106:	f7ff fbb5 	bl	8000874 <RCC_GetPCLK2Value>
 800110a:	61f8      	str	r0, [r7, #28]
 800110c:	e002      	b.n	8001114 <USART_SetBaudRate+0x2c>
  }else
  {
	   PCLKx = RCC_GetPCLK1Value();
 800110e:	f7ff fb59 	bl	80007c4 <RCC_GetPCLK1Value>
 8001112:	61f8      	str	r0, [r7, #28]
  }

  //Check for OVER8 configuration bit
  if(pUSARTx->USART_CR1 & (1 << USART_CR1_OVER8))
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d00b      	beq.n	8001138 <USART_SetBaudRate+0x50>
  {
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8001120:	69fa      	ldr	r2, [r7, #28]
 8001122:	4613      	mov	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	4413      	add	r3, r2
 8001128:	009a      	lsls	r2, r3, #2
 800112a:	441a      	add	r2, r3
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	fbb2 f3f3 	udiv	r3, r2, r3
 8001134:	61bb      	str	r3, [r7, #24]
 8001136:	e00a      	b.n	800114e <USART_SetBaudRate+0x66>
  }else
  {
	   //over sampling by 16
	   usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 8001138:	69fa      	ldr	r2, [r7, #28]
 800113a:	4613      	mov	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	009a      	lsls	r2, r3, #2
 8001142:	441a      	add	r2, r3
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	fbb2 f3f3 	udiv	r3, r2, r3
 800114c:	61bb      	str	r3, [r7, #24]
  }

  //Calculate the Mantissa part
  M_part = usartdiv/100;
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	4a1d      	ldr	r2, [pc, #116]	; (80011c8 <USART_SetBaudRate+0xe0>)
 8001152:	fba2 2303 	umull	r2, r3, r2, r3
 8001156:	095b      	lsrs	r3, r3, #5
 8001158:	60fb      	str	r3, [r7, #12]

  //Place the Mantissa part in appropriate bit position . refer USART_BRR
  tempreg |= M_part << 4;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	011b      	lsls	r3, r3, #4
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]

  //Extract the fraction part
  F_part = (usartdiv - (M_part * 100));
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2264      	movs	r2, #100	; 0x64
 8001168:	fb02 f303 	mul.w	r3, r2, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	617b      	str	r3, [r7, #20]

  //Calculate the final fractional
  if(pUSARTx->USART_CR1 & ( 1 << USART_CR1_OVER8))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d00a      	beq.n	8001194 <USART_SetBaudRate+0xac>
   {
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	3332      	adds	r3, #50	; 0x32
 8001184:	4a10      	ldr	r2, [pc, #64]	; (80011c8 <USART_SetBaudRate+0xe0>)
 8001186:	fba2 2303 	umull	r2, r3, r2, r3
 800118a:	095b      	lsrs	r3, r3, #5
 800118c:	f003 0307 	and.w	r3, r3, #7
 8001190:	617b      	str	r3, [r7, #20]
 8001192:	e009      	b.n	80011a8 <USART_SetBaudRate+0xc0>

   }else
   {
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	011b      	lsls	r3, r3, #4
 8001198:	3332      	adds	r3, #50	; 0x32
 800119a:	4a0b      	ldr	r2, [pc, #44]	; (80011c8 <USART_SetBaudRate+0xe0>)
 800119c:	fba2 2303 	umull	r2, r3, r2, r3
 80011a0:	095b      	lsrs	r3, r3, #5
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	617b      	str	r3, [r7, #20]

   }

  //Place the fractional part in appropriate bit position . refer USART_BRR
  tempreg |= F_part;
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]

  //copy the value of tempreg in to BRR register
  pUSARTx->USART_BRR = tempreg;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	609a      	str	r2, [r3, #8]
}
 80011b6:	bf00      	nop
 80011b8:	3720      	adds	r7, #32
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40011000 	.word	0x40011000
 80011c4:	40011400 	.word	0x40011400
 80011c8:	51eb851f 	.word	0x51eb851f

080011cc <USART2_Init>:
uint8_t g_data = 0;

extern void initialise_monitor_handles();

void USART2_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;
 80011d0:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <USART2_Init+0x3c>)
 80011d2:	4a0e      	ldr	r2, [pc, #56]	; (800120c <USART2_Init+0x40>)
 80011d4:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Buad = USART_STD_BAUD_115200;
 80011d6:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <USART2_Init+0x3c>)
 80011d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011dc:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowCtrl = USART_HW_FLOW_CTRL_NONE;
 80011de:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <USART2_Init+0x3c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_TXRX;
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <USART2_Init+0x3c>)
 80011e6:	2202      	movs	r2, #2
 80011e8:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_STOPBits = USART_STOPBITS_1;
 80011ea:	4b07      	ldr	r3, [pc, #28]	; (8001208 <USART2_Init+0x3c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_WORDLEN = USART_WORDLEN_8BITS;
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <USART2_Init+0x3c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_PARITY = USART_PARITY_DISABLE;
 80011f6:	4b04      	ldr	r3, [pc, #16]	; (8001208 <USART2_Init+0x3c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <USART2_Init+0x3c>)
 80011fe:	f7ff fc33 	bl	8000a68 <USART_Init>
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000168 	.word	0x20000168
 800120c:	40004400 	.word	0x40004400

08001210 <USART2_GPIOInit>:

void 	USART2_GPIOInit(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
	GPIO_HANDLE_t usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <USART2_GPIOInit+0x40>)
 8001218:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800121a:	2302      	movs	r3, #2
 800121c:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800121e:	2300      	movs	r3, #0
 8001220:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8001222:	2301      	movs	r3, #1
 8001224:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8001226:	2302      	movs	r3, #2
 8001228:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode =7;
 800122a:	2307      	movs	r3, #7
 800122c:	737b      	strb	r3, [r7, #13]

	usart_gpios.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_2;
 800122e:	2302      	movs	r3, #2
 8001230:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff f91d 	bl	8000474 <GPIO_Init>

	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_3;
 800123a:	2303      	movs	r3, #3
 800123c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff f917 	bl	8000474 <GPIO_Init>

}
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40020000 	.word	0x40020000

08001254 <delay>:
	GPIO_Init(&GpioLed);

}

void delay(void)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	e002      	b.n	8001266 <delay+0x12>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3301      	adds	r3, #1
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a03      	ldr	r2, [pc, #12]	; (8001278 <delay+0x24>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d9f8      	bls.n	8001260 <delay+0xc>
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr
 8001278:	0003d08f 	.word	0x0003d08f

0800127c <main>:
int main(void)
{
 800127c:	b590      	push	{r4, r7, lr}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
	uint32_t cnt = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]


	initialise_monitor_handles();
 8001286:	f001 fa89 	bl	800279c <initialise_monitor_handles>

	USART2_GPIOInit();
 800128a:	f7ff ffc1 	bl	8001210 <USART2_GPIOInit>
    USART2_Init();
 800128e:	f7ff ff9d 	bl	80011cc <USART2_Init>

    USART_IRQITConfig(IRQ_NO_USART2,ENABLE);
 8001292:	2101      	movs	r1, #1
 8001294:	2026      	movs	r0, #38	; 0x26
 8001296:	f7ff fcd7 	bl	8000c48 <USART_IRQITConfig>

    USART_PCtrl(USART2,ENABLE);
 800129a:	2101      	movs	r1, #1
 800129c:	482f      	ldr	r0, [pc, #188]	; (800135c <main+0xe0>)
 800129e:	f7ff ff07 	bl	80010b0 <USART_PCtrl>

    printf("Application is running\n");
 80012a2:	482f      	ldr	r0, [pc, #188]	; (8001360 <main+0xe4>)
 80012a4:	f000 f956 	bl	8001554 <puts>

    //do forever
    while(1)
    {
		//wait till button is pressed
		while( ! GPIO_ReadPin(GPIOA,GPIO_PIN_0) );
 80012a8:	bf00      	nop
 80012aa:	2100      	movs	r1, #0
 80012ac:	482d      	ldr	r0, [pc, #180]	; (8001364 <main+0xe8>)
 80012ae:	f7ff fa73 	bl	8000798 <GPIO_ReadPin>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d0f8      	beq.n	80012aa <main+0x2e>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 80012b8:	f7ff ffcc 	bl	8001254 <delay>

		// Next message index ; make sure that cnt value doesn't cross 2
		cnt = cnt % 3;
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	4b2a      	ldr	r3, [pc, #168]	; (8001368 <main+0xec>)
 80012c0:	fba3 1302 	umull	r1, r3, r3, r2
 80012c4:	0859      	lsrs	r1, r3, #1
 80012c6:	460b      	mov	r3, r1
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	440b      	add	r3, r1
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	607b      	str	r3, [r7, #4]

		//First lets enable the reception in interrupt mode
		//this code enables the receive interrupt
		while ( USART_RecieveDataIT(&usart2_handle,(uint8_t*)rx_buf,strlen(msg[cnt])) != USART_READY );
 80012d0:	bf00      	nop
 80012d2:	4a26      	ldr	r2, [pc, #152]	; (800136c <main+0xf0>)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7fe ff88 	bl	80001f0 <strlen>
 80012e0:	4603      	mov	r3, r0
 80012e2:	461a      	mov	r2, r3
 80012e4:	4922      	ldr	r1, [pc, #136]	; (8001370 <main+0xf4>)
 80012e6:	4823      	ldr	r0, [pc, #140]	; (8001374 <main+0xf8>)
 80012e8:	f7ff fc8a 	bl	8000c00 <USART_RecieveDataIT>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1ef      	bne.n	80012d2 <main+0x56>

		//Send the msg indexed by cnt in blocking mode
    	USART_SendData(&usart2_handle,(uint8_t*)msg[cnt],strlen(msg[cnt]));
 80012f2:	4a1e      	ldr	r2, [pc, #120]	; (800136c <main+0xf0>)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80012fa:	4a1c      	ldr	r2, [pc, #112]	; (800136c <main+0xf0>)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001302:	4618      	mov	r0, r3
 8001304:	f7fe ff74 	bl	80001f0 <strlen>
 8001308:	4603      	mov	r3, r0
 800130a:	461a      	mov	r2, r3
 800130c:	4621      	mov	r1, r4
 800130e:	4819      	ldr	r0, [pc, #100]	; (8001374 <main+0xf8>)
 8001310:	f7ff fc29 	bl	8000b66 <USART_SendData>

    	printf("Transmitted : %s\n",msg[cnt]);
 8001314:	4a15      	ldr	r2, [pc, #84]	; (800136c <main+0xf0>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131c:	4619      	mov	r1, r3
 800131e:	4816      	ldr	r0, [pc, #88]	; (8001378 <main+0xfc>)
 8001320:	f000 f8a4 	bl	800146c <iprintf>


    	//Now lets wait until all the bytes are received from the arduino .
    	//When all the bytes are received rxCmplt will be SET in application callback
    	while(rxCmplt != SET);
 8001324:	bf00      	nop
 8001326:	4b15      	ldr	r3, [pc, #84]	; (800137c <main+0x100>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d1fb      	bne.n	8001326 <main+0xaa>

    	//just make sure that last byte should be null otherwise %s fails while printing
    	rx_buf[strlen(msg[cnt])+ 1] = '\0';
 800132e:	4a0f      	ldr	r2, [pc, #60]	; (800136c <main+0xf0>)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001336:	4618      	mov	r0, r3
 8001338:	f7fe ff5a 	bl	80001f0 <strlen>
 800133c:	4603      	mov	r3, r0
 800133e:	3301      	adds	r3, #1
 8001340:	4a0b      	ldr	r2, [pc, #44]	; (8001370 <main+0xf4>)
 8001342:	2100      	movs	r1, #0
 8001344:	54d1      	strb	r1, [r2, r3]

    	//Print what we received from the arduino
    	printf("Received    : %s\n",rx_buf);
 8001346:	490a      	ldr	r1, [pc, #40]	; (8001370 <main+0xf4>)
 8001348:	480d      	ldr	r0, [pc, #52]	; (8001380 <main+0x104>)
 800134a:	f000 f88f 	bl	800146c <iprintf>

    	//invalidate the flag
    	rxCmplt = RESET;
 800134e:	4b0b      	ldr	r3, [pc, #44]	; (800137c <main+0x100>)
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]

    	//move on to next message indexed in msg[]
    	cnt ++;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3301      	adds	r3, #1
 8001358:	607b      	str	r3, [r7, #4]
		while( ! GPIO_ReadPin(GPIOA,GPIO_PIN_0) );
 800135a:	e7a5      	b.n	80012a8 <main+0x2c>
 800135c:	40004400 	.word	0x40004400
 8001360:	080028ec 	.word	0x080028ec
 8001364:	40020000 	.word	0x40020000
 8001368:	aaaaaaab 	.word	0xaaaaaaab
 800136c:	20000014 	.word	0x20000014
 8001370:	20000190 	.word	0x20000190
 8001374:	20000168 	.word	0x20000168
 8001378:	08002904 	.word	0x08002904
 800137c:	200000ac 	.word	0x200000ac
 8001380:	08002918 	.word	0x08002918

08001384 <USART2_IRQHandler>:
	return 0;
}


void USART2_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
	USART_IRQHandling(&usart2_handle);
 8001388:	4802      	ldr	r0, [pc, #8]	; (8001394 <USART2_IRQHandler+0x10>)
 800138a:	f7ff fce1 	bl	8000d50 <USART_IRQHandling>
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000168 	.word	0x20000168

08001398 <USART_ApplicationEventCallback>:

void USART_ApplicationEventCallback( USART_HANDLE_t *pUSARTHandle,uint8_t ApEv)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	70fb      	strb	r3, [r7, #3]
   if(ApEv == USART_EVENT_RX_CMPLT)
 80013a4:	78fb      	ldrb	r3, [r7, #3]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d102      	bne.n	80013b0 <USART_ApplicationEventCallback+0x18>
   {
			rxCmplt = SET;
 80013aa:	4b04      	ldr	r3, [pc, #16]	; (80013bc <USART_ApplicationEventCallback+0x24>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	701a      	strb	r2, [r3, #0]

   }else if (ApEv == USART_EVENT_TX_CMPLT)
   {
	   ;
   }
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	200000ac 	.word	0x200000ac

080013c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013c0:	480d      	ldr	r0, [pc, #52]	; (80013f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 80013c4:	480d      	ldr	r0, [pc, #52]	; (80013fc <LoopForever+0x6>)
  ldr r1, =_edata
 80013c6:	490e      	ldr	r1, [pc, #56]	; (8001400 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013c8:	4a0e      	ldr	r2, [pc, #56]	; (8001404 <LoopForever+0xe>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013cc:	e002      	b.n	80013d4 <LoopCopyDataInit>

080013ce <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 80013ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013d2:	3304      	adds	r3, #4

080013d4 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 80013d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d6:	428c      	cmp	r4, r1



  bcc CopyDataInit
 80013d8:	d3f9      	bcc.n	80013ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013da:	4a0b      	ldr	r2, [pc, #44]	; (8001408 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013dc:	4c0b      	ldr	r4, [pc, #44]	; (800140c <LoopForever+0x16>)
  movs r3, #0
 80013de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e0:	e001      	b.n	80013e6 <LoopFillZerobss>

080013e2 <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 80013e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e4:	3204      	adds	r2, #4

080013e6 <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 80013e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e8:	d3fb      	bcc.n	80013e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80013ea:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80013ee:	f000 f811 	bl	8001414 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013f2:	f7ff ff43 	bl	800127c <main>

080013f6 <LoopForever>:

LoopForever:
    b LoopForever
 80013f6:	e7fe      	b.n	80013f6 <LoopForever>
  ldr   r0, =_estack
 80013f8:	2001ffff 	.word	0x2001ffff
  ldr r0, =_sdata
 80013fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001400:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001404:	080029e8 	.word	0x080029e8
  ldr r2, =_sbss
 8001408:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800140c:	20000594 	.word	0x20000594

08001410 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001410:	e7fe      	b.n	8001410 <ADC_IRQHandler>
	...

08001414 <__libc_init_array>:
 8001414:	b570      	push	{r4, r5, r6, lr}
 8001416:	4e0d      	ldr	r6, [pc, #52]	; (800144c <__libc_init_array+0x38>)
 8001418:	4c0d      	ldr	r4, [pc, #52]	; (8001450 <__libc_init_array+0x3c>)
 800141a:	1ba4      	subs	r4, r4, r6
 800141c:	10a4      	asrs	r4, r4, #2
 800141e:	2500      	movs	r5, #0
 8001420:	42a5      	cmp	r5, r4
 8001422:	d109      	bne.n	8001438 <__libc_init_array+0x24>
 8001424:	4e0b      	ldr	r6, [pc, #44]	; (8001454 <__libc_init_array+0x40>)
 8001426:	4c0c      	ldr	r4, [pc, #48]	; (8001458 <__libc_init_array+0x44>)
 8001428:	f001 fa38 	bl	800289c <_init>
 800142c:	1ba4      	subs	r4, r4, r6
 800142e:	10a4      	asrs	r4, r4, #2
 8001430:	2500      	movs	r5, #0
 8001432:	42a5      	cmp	r5, r4
 8001434:	d105      	bne.n	8001442 <__libc_init_array+0x2e>
 8001436:	bd70      	pop	{r4, r5, r6, pc}
 8001438:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800143c:	4798      	blx	r3
 800143e:	3501      	adds	r5, #1
 8001440:	e7ee      	b.n	8001420 <__libc_init_array+0xc>
 8001442:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001446:	4798      	blx	r3
 8001448:	3501      	adds	r5, #1
 800144a:	e7f2      	b.n	8001432 <__libc_init_array+0x1e>
 800144c:	080029e0 	.word	0x080029e0
 8001450:	080029e0 	.word	0x080029e0
 8001454:	080029e0 	.word	0x080029e0
 8001458:	080029e4 	.word	0x080029e4

0800145c <memset>:
 800145c:	4402      	add	r2, r0
 800145e:	4603      	mov	r3, r0
 8001460:	4293      	cmp	r3, r2
 8001462:	d100      	bne.n	8001466 <memset+0xa>
 8001464:	4770      	bx	lr
 8001466:	f803 1b01 	strb.w	r1, [r3], #1
 800146a:	e7f9      	b.n	8001460 <memset+0x4>

0800146c <iprintf>:
 800146c:	b40f      	push	{r0, r1, r2, r3}
 800146e:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <iprintf+0x2c>)
 8001470:	b513      	push	{r0, r1, r4, lr}
 8001472:	681c      	ldr	r4, [r3, #0]
 8001474:	b124      	cbz	r4, 8001480 <iprintf+0x14>
 8001476:	69a3      	ldr	r3, [r4, #24]
 8001478:	b913      	cbnz	r3, 8001480 <iprintf+0x14>
 800147a:	4620      	mov	r0, r4
 800147c:	f000 fa22 	bl	80018c4 <__sinit>
 8001480:	ab05      	add	r3, sp, #20
 8001482:	9a04      	ldr	r2, [sp, #16]
 8001484:	68a1      	ldr	r1, [r4, #8]
 8001486:	9301      	str	r3, [sp, #4]
 8001488:	4620      	mov	r0, r4
 800148a:	f000 fbd9 	bl	8001c40 <_vfiprintf_r>
 800148e:	b002      	add	sp, #8
 8001490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001494:	b004      	add	sp, #16
 8001496:	4770      	bx	lr
 8001498:	20000020 	.word	0x20000020

0800149c <_puts_r>:
 800149c:	b570      	push	{r4, r5, r6, lr}
 800149e:	460e      	mov	r6, r1
 80014a0:	4605      	mov	r5, r0
 80014a2:	b118      	cbz	r0, 80014ac <_puts_r+0x10>
 80014a4:	6983      	ldr	r3, [r0, #24]
 80014a6:	b90b      	cbnz	r3, 80014ac <_puts_r+0x10>
 80014a8:	f000 fa0c 	bl	80018c4 <__sinit>
 80014ac:	69ab      	ldr	r3, [r5, #24]
 80014ae:	68ac      	ldr	r4, [r5, #8]
 80014b0:	b913      	cbnz	r3, 80014b8 <_puts_r+0x1c>
 80014b2:	4628      	mov	r0, r5
 80014b4:	f000 fa06 	bl	80018c4 <__sinit>
 80014b8:	4b23      	ldr	r3, [pc, #140]	; (8001548 <_puts_r+0xac>)
 80014ba:	429c      	cmp	r4, r3
 80014bc:	d117      	bne.n	80014ee <_puts_r+0x52>
 80014be:	686c      	ldr	r4, [r5, #4]
 80014c0:	89a3      	ldrh	r3, [r4, #12]
 80014c2:	071b      	lsls	r3, r3, #28
 80014c4:	d51d      	bpl.n	8001502 <_puts_r+0x66>
 80014c6:	6923      	ldr	r3, [r4, #16]
 80014c8:	b1db      	cbz	r3, 8001502 <_puts_r+0x66>
 80014ca:	3e01      	subs	r6, #1
 80014cc:	68a3      	ldr	r3, [r4, #8]
 80014ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80014d2:	3b01      	subs	r3, #1
 80014d4:	60a3      	str	r3, [r4, #8]
 80014d6:	b9e9      	cbnz	r1, 8001514 <_puts_r+0x78>
 80014d8:	2b00      	cmp	r3, #0
 80014da:	da2e      	bge.n	800153a <_puts_r+0x9e>
 80014dc:	4622      	mov	r2, r4
 80014de:	210a      	movs	r1, #10
 80014e0:	4628      	mov	r0, r5
 80014e2:	f000 f83f 	bl	8001564 <__swbuf_r>
 80014e6:	3001      	adds	r0, #1
 80014e8:	d011      	beq.n	800150e <_puts_r+0x72>
 80014ea:	200a      	movs	r0, #10
 80014ec:	e011      	b.n	8001512 <_puts_r+0x76>
 80014ee:	4b17      	ldr	r3, [pc, #92]	; (800154c <_puts_r+0xb0>)
 80014f0:	429c      	cmp	r4, r3
 80014f2:	d101      	bne.n	80014f8 <_puts_r+0x5c>
 80014f4:	68ac      	ldr	r4, [r5, #8]
 80014f6:	e7e3      	b.n	80014c0 <_puts_r+0x24>
 80014f8:	4b15      	ldr	r3, [pc, #84]	; (8001550 <_puts_r+0xb4>)
 80014fa:	429c      	cmp	r4, r3
 80014fc:	bf08      	it	eq
 80014fe:	68ec      	ldreq	r4, [r5, #12]
 8001500:	e7de      	b.n	80014c0 <_puts_r+0x24>
 8001502:	4621      	mov	r1, r4
 8001504:	4628      	mov	r0, r5
 8001506:	f000 f87f 	bl	8001608 <__swsetup_r>
 800150a:	2800      	cmp	r0, #0
 800150c:	d0dd      	beq.n	80014ca <_puts_r+0x2e>
 800150e:	f04f 30ff 	mov.w	r0, #4294967295
 8001512:	bd70      	pop	{r4, r5, r6, pc}
 8001514:	2b00      	cmp	r3, #0
 8001516:	da04      	bge.n	8001522 <_puts_r+0x86>
 8001518:	69a2      	ldr	r2, [r4, #24]
 800151a:	429a      	cmp	r2, r3
 800151c:	dc06      	bgt.n	800152c <_puts_r+0x90>
 800151e:	290a      	cmp	r1, #10
 8001520:	d004      	beq.n	800152c <_puts_r+0x90>
 8001522:	6823      	ldr	r3, [r4, #0]
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	6022      	str	r2, [r4, #0]
 8001528:	7019      	strb	r1, [r3, #0]
 800152a:	e7cf      	b.n	80014cc <_puts_r+0x30>
 800152c:	4622      	mov	r2, r4
 800152e:	4628      	mov	r0, r5
 8001530:	f000 f818 	bl	8001564 <__swbuf_r>
 8001534:	3001      	adds	r0, #1
 8001536:	d1c9      	bne.n	80014cc <_puts_r+0x30>
 8001538:	e7e9      	b.n	800150e <_puts_r+0x72>
 800153a:	6823      	ldr	r3, [r4, #0]
 800153c:	200a      	movs	r0, #10
 800153e:	1c5a      	adds	r2, r3, #1
 8001540:	6022      	str	r2, [r4, #0]
 8001542:	7018      	strb	r0, [r3, #0]
 8001544:	e7e5      	b.n	8001512 <_puts_r+0x76>
 8001546:	bf00      	nop
 8001548:	08002950 	.word	0x08002950
 800154c:	08002970 	.word	0x08002970
 8001550:	08002930 	.word	0x08002930

08001554 <puts>:
 8001554:	4b02      	ldr	r3, [pc, #8]	; (8001560 <puts+0xc>)
 8001556:	4601      	mov	r1, r0
 8001558:	6818      	ldr	r0, [r3, #0]
 800155a:	f7ff bf9f 	b.w	800149c <_puts_r>
 800155e:	bf00      	nop
 8001560:	20000020 	.word	0x20000020

08001564 <__swbuf_r>:
 8001564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001566:	460e      	mov	r6, r1
 8001568:	4614      	mov	r4, r2
 800156a:	4605      	mov	r5, r0
 800156c:	b118      	cbz	r0, 8001576 <__swbuf_r+0x12>
 800156e:	6983      	ldr	r3, [r0, #24]
 8001570:	b90b      	cbnz	r3, 8001576 <__swbuf_r+0x12>
 8001572:	f000 f9a7 	bl	80018c4 <__sinit>
 8001576:	4b21      	ldr	r3, [pc, #132]	; (80015fc <__swbuf_r+0x98>)
 8001578:	429c      	cmp	r4, r3
 800157a:	d12a      	bne.n	80015d2 <__swbuf_r+0x6e>
 800157c:	686c      	ldr	r4, [r5, #4]
 800157e:	69a3      	ldr	r3, [r4, #24]
 8001580:	60a3      	str	r3, [r4, #8]
 8001582:	89a3      	ldrh	r3, [r4, #12]
 8001584:	071a      	lsls	r2, r3, #28
 8001586:	d52e      	bpl.n	80015e6 <__swbuf_r+0x82>
 8001588:	6923      	ldr	r3, [r4, #16]
 800158a:	b363      	cbz	r3, 80015e6 <__swbuf_r+0x82>
 800158c:	6923      	ldr	r3, [r4, #16]
 800158e:	6820      	ldr	r0, [r4, #0]
 8001590:	1ac0      	subs	r0, r0, r3
 8001592:	6963      	ldr	r3, [r4, #20]
 8001594:	b2f6      	uxtb	r6, r6
 8001596:	4283      	cmp	r3, r0
 8001598:	4637      	mov	r7, r6
 800159a:	dc04      	bgt.n	80015a6 <__swbuf_r+0x42>
 800159c:	4621      	mov	r1, r4
 800159e:	4628      	mov	r0, r5
 80015a0:	f000 f926 	bl	80017f0 <_fflush_r>
 80015a4:	bb28      	cbnz	r0, 80015f2 <__swbuf_r+0x8e>
 80015a6:	68a3      	ldr	r3, [r4, #8]
 80015a8:	3b01      	subs	r3, #1
 80015aa:	60a3      	str	r3, [r4, #8]
 80015ac:	6823      	ldr	r3, [r4, #0]
 80015ae:	1c5a      	adds	r2, r3, #1
 80015b0:	6022      	str	r2, [r4, #0]
 80015b2:	701e      	strb	r6, [r3, #0]
 80015b4:	6963      	ldr	r3, [r4, #20]
 80015b6:	3001      	adds	r0, #1
 80015b8:	4283      	cmp	r3, r0
 80015ba:	d004      	beq.n	80015c6 <__swbuf_r+0x62>
 80015bc:	89a3      	ldrh	r3, [r4, #12]
 80015be:	07db      	lsls	r3, r3, #31
 80015c0:	d519      	bpl.n	80015f6 <__swbuf_r+0x92>
 80015c2:	2e0a      	cmp	r6, #10
 80015c4:	d117      	bne.n	80015f6 <__swbuf_r+0x92>
 80015c6:	4621      	mov	r1, r4
 80015c8:	4628      	mov	r0, r5
 80015ca:	f000 f911 	bl	80017f0 <_fflush_r>
 80015ce:	b190      	cbz	r0, 80015f6 <__swbuf_r+0x92>
 80015d0:	e00f      	b.n	80015f2 <__swbuf_r+0x8e>
 80015d2:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <__swbuf_r+0x9c>)
 80015d4:	429c      	cmp	r4, r3
 80015d6:	d101      	bne.n	80015dc <__swbuf_r+0x78>
 80015d8:	68ac      	ldr	r4, [r5, #8]
 80015da:	e7d0      	b.n	800157e <__swbuf_r+0x1a>
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <__swbuf_r+0xa0>)
 80015de:	429c      	cmp	r4, r3
 80015e0:	bf08      	it	eq
 80015e2:	68ec      	ldreq	r4, [r5, #12]
 80015e4:	e7cb      	b.n	800157e <__swbuf_r+0x1a>
 80015e6:	4621      	mov	r1, r4
 80015e8:	4628      	mov	r0, r5
 80015ea:	f000 f80d 	bl	8001608 <__swsetup_r>
 80015ee:	2800      	cmp	r0, #0
 80015f0:	d0cc      	beq.n	800158c <__swbuf_r+0x28>
 80015f2:	f04f 37ff 	mov.w	r7, #4294967295
 80015f6:	4638      	mov	r0, r7
 80015f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015fa:	bf00      	nop
 80015fc:	08002950 	.word	0x08002950
 8001600:	08002970 	.word	0x08002970
 8001604:	08002930 	.word	0x08002930

08001608 <__swsetup_r>:
 8001608:	4b32      	ldr	r3, [pc, #200]	; (80016d4 <__swsetup_r+0xcc>)
 800160a:	b570      	push	{r4, r5, r6, lr}
 800160c:	681d      	ldr	r5, [r3, #0]
 800160e:	4606      	mov	r6, r0
 8001610:	460c      	mov	r4, r1
 8001612:	b125      	cbz	r5, 800161e <__swsetup_r+0x16>
 8001614:	69ab      	ldr	r3, [r5, #24]
 8001616:	b913      	cbnz	r3, 800161e <__swsetup_r+0x16>
 8001618:	4628      	mov	r0, r5
 800161a:	f000 f953 	bl	80018c4 <__sinit>
 800161e:	4b2e      	ldr	r3, [pc, #184]	; (80016d8 <__swsetup_r+0xd0>)
 8001620:	429c      	cmp	r4, r3
 8001622:	d10f      	bne.n	8001644 <__swsetup_r+0x3c>
 8001624:	686c      	ldr	r4, [r5, #4]
 8001626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800162a:	b29a      	uxth	r2, r3
 800162c:	0715      	lsls	r5, r2, #28
 800162e:	d42c      	bmi.n	800168a <__swsetup_r+0x82>
 8001630:	06d0      	lsls	r0, r2, #27
 8001632:	d411      	bmi.n	8001658 <__swsetup_r+0x50>
 8001634:	2209      	movs	r2, #9
 8001636:	6032      	str	r2, [r6, #0]
 8001638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800163c:	81a3      	strh	r3, [r4, #12]
 800163e:	f04f 30ff 	mov.w	r0, #4294967295
 8001642:	e03e      	b.n	80016c2 <__swsetup_r+0xba>
 8001644:	4b25      	ldr	r3, [pc, #148]	; (80016dc <__swsetup_r+0xd4>)
 8001646:	429c      	cmp	r4, r3
 8001648:	d101      	bne.n	800164e <__swsetup_r+0x46>
 800164a:	68ac      	ldr	r4, [r5, #8]
 800164c:	e7eb      	b.n	8001626 <__swsetup_r+0x1e>
 800164e:	4b24      	ldr	r3, [pc, #144]	; (80016e0 <__swsetup_r+0xd8>)
 8001650:	429c      	cmp	r4, r3
 8001652:	bf08      	it	eq
 8001654:	68ec      	ldreq	r4, [r5, #12]
 8001656:	e7e6      	b.n	8001626 <__swsetup_r+0x1e>
 8001658:	0751      	lsls	r1, r2, #29
 800165a:	d512      	bpl.n	8001682 <__swsetup_r+0x7a>
 800165c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800165e:	b141      	cbz	r1, 8001672 <__swsetup_r+0x6a>
 8001660:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001664:	4299      	cmp	r1, r3
 8001666:	d002      	beq.n	800166e <__swsetup_r+0x66>
 8001668:	4630      	mov	r0, r6
 800166a:	f000 fa19 	bl	8001aa0 <_free_r>
 800166e:	2300      	movs	r3, #0
 8001670:	6363      	str	r3, [r4, #52]	; 0x34
 8001672:	89a3      	ldrh	r3, [r4, #12]
 8001674:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001678:	81a3      	strh	r3, [r4, #12]
 800167a:	2300      	movs	r3, #0
 800167c:	6063      	str	r3, [r4, #4]
 800167e:	6923      	ldr	r3, [r4, #16]
 8001680:	6023      	str	r3, [r4, #0]
 8001682:	89a3      	ldrh	r3, [r4, #12]
 8001684:	f043 0308 	orr.w	r3, r3, #8
 8001688:	81a3      	strh	r3, [r4, #12]
 800168a:	6923      	ldr	r3, [r4, #16]
 800168c:	b94b      	cbnz	r3, 80016a2 <__swsetup_r+0x9a>
 800168e:	89a3      	ldrh	r3, [r4, #12]
 8001690:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001698:	d003      	beq.n	80016a2 <__swsetup_r+0x9a>
 800169a:	4621      	mov	r1, r4
 800169c:	4630      	mov	r0, r6
 800169e:	f000 f9bf 	bl	8001a20 <__smakebuf_r>
 80016a2:	89a2      	ldrh	r2, [r4, #12]
 80016a4:	f012 0301 	ands.w	r3, r2, #1
 80016a8:	d00c      	beq.n	80016c4 <__swsetup_r+0xbc>
 80016aa:	2300      	movs	r3, #0
 80016ac:	60a3      	str	r3, [r4, #8]
 80016ae:	6963      	ldr	r3, [r4, #20]
 80016b0:	425b      	negs	r3, r3
 80016b2:	61a3      	str	r3, [r4, #24]
 80016b4:	6923      	ldr	r3, [r4, #16]
 80016b6:	b953      	cbnz	r3, 80016ce <__swsetup_r+0xc6>
 80016b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016bc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80016c0:	d1ba      	bne.n	8001638 <__swsetup_r+0x30>
 80016c2:	bd70      	pop	{r4, r5, r6, pc}
 80016c4:	0792      	lsls	r2, r2, #30
 80016c6:	bf58      	it	pl
 80016c8:	6963      	ldrpl	r3, [r4, #20]
 80016ca:	60a3      	str	r3, [r4, #8]
 80016cc:	e7f2      	b.n	80016b4 <__swsetup_r+0xac>
 80016ce:	2000      	movs	r0, #0
 80016d0:	e7f7      	b.n	80016c2 <__swsetup_r+0xba>
 80016d2:	bf00      	nop
 80016d4:	20000020 	.word	0x20000020
 80016d8:	08002950 	.word	0x08002950
 80016dc:	08002970 	.word	0x08002970
 80016e0:	08002930 	.word	0x08002930

080016e4 <__sflush_r>:
 80016e4:	898a      	ldrh	r2, [r1, #12]
 80016e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016ea:	4605      	mov	r5, r0
 80016ec:	0710      	lsls	r0, r2, #28
 80016ee:	460c      	mov	r4, r1
 80016f0:	d458      	bmi.n	80017a4 <__sflush_r+0xc0>
 80016f2:	684b      	ldr	r3, [r1, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	dc05      	bgt.n	8001704 <__sflush_r+0x20>
 80016f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	dc02      	bgt.n	8001704 <__sflush_r+0x20>
 80016fe:	2000      	movs	r0, #0
 8001700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001704:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001706:	2e00      	cmp	r6, #0
 8001708:	d0f9      	beq.n	80016fe <__sflush_r+0x1a>
 800170a:	2300      	movs	r3, #0
 800170c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001710:	682f      	ldr	r7, [r5, #0]
 8001712:	6a21      	ldr	r1, [r4, #32]
 8001714:	602b      	str	r3, [r5, #0]
 8001716:	d032      	beq.n	800177e <__sflush_r+0x9a>
 8001718:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800171a:	89a3      	ldrh	r3, [r4, #12]
 800171c:	075a      	lsls	r2, r3, #29
 800171e:	d505      	bpl.n	800172c <__sflush_r+0x48>
 8001720:	6863      	ldr	r3, [r4, #4]
 8001722:	1ac0      	subs	r0, r0, r3
 8001724:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001726:	b10b      	cbz	r3, 800172c <__sflush_r+0x48>
 8001728:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800172a:	1ac0      	subs	r0, r0, r3
 800172c:	2300      	movs	r3, #0
 800172e:	4602      	mov	r2, r0
 8001730:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001732:	6a21      	ldr	r1, [r4, #32]
 8001734:	4628      	mov	r0, r5
 8001736:	47b0      	blx	r6
 8001738:	1c43      	adds	r3, r0, #1
 800173a:	89a3      	ldrh	r3, [r4, #12]
 800173c:	d106      	bne.n	800174c <__sflush_r+0x68>
 800173e:	6829      	ldr	r1, [r5, #0]
 8001740:	291d      	cmp	r1, #29
 8001742:	d848      	bhi.n	80017d6 <__sflush_r+0xf2>
 8001744:	4a29      	ldr	r2, [pc, #164]	; (80017ec <__sflush_r+0x108>)
 8001746:	40ca      	lsrs	r2, r1
 8001748:	07d6      	lsls	r6, r2, #31
 800174a:	d544      	bpl.n	80017d6 <__sflush_r+0xf2>
 800174c:	2200      	movs	r2, #0
 800174e:	6062      	str	r2, [r4, #4]
 8001750:	04d9      	lsls	r1, r3, #19
 8001752:	6922      	ldr	r2, [r4, #16]
 8001754:	6022      	str	r2, [r4, #0]
 8001756:	d504      	bpl.n	8001762 <__sflush_r+0x7e>
 8001758:	1c42      	adds	r2, r0, #1
 800175a:	d101      	bne.n	8001760 <__sflush_r+0x7c>
 800175c:	682b      	ldr	r3, [r5, #0]
 800175e:	b903      	cbnz	r3, 8001762 <__sflush_r+0x7e>
 8001760:	6560      	str	r0, [r4, #84]	; 0x54
 8001762:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001764:	602f      	str	r7, [r5, #0]
 8001766:	2900      	cmp	r1, #0
 8001768:	d0c9      	beq.n	80016fe <__sflush_r+0x1a>
 800176a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800176e:	4299      	cmp	r1, r3
 8001770:	d002      	beq.n	8001778 <__sflush_r+0x94>
 8001772:	4628      	mov	r0, r5
 8001774:	f000 f994 	bl	8001aa0 <_free_r>
 8001778:	2000      	movs	r0, #0
 800177a:	6360      	str	r0, [r4, #52]	; 0x34
 800177c:	e7c0      	b.n	8001700 <__sflush_r+0x1c>
 800177e:	2301      	movs	r3, #1
 8001780:	4628      	mov	r0, r5
 8001782:	47b0      	blx	r6
 8001784:	1c41      	adds	r1, r0, #1
 8001786:	d1c8      	bne.n	800171a <__sflush_r+0x36>
 8001788:	682b      	ldr	r3, [r5, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0c5      	beq.n	800171a <__sflush_r+0x36>
 800178e:	2b1d      	cmp	r3, #29
 8001790:	d001      	beq.n	8001796 <__sflush_r+0xb2>
 8001792:	2b16      	cmp	r3, #22
 8001794:	d101      	bne.n	800179a <__sflush_r+0xb6>
 8001796:	602f      	str	r7, [r5, #0]
 8001798:	e7b1      	b.n	80016fe <__sflush_r+0x1a>
 800179a:	89a3      	ldrh	r3, [r4, #12]
 800179c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017a0:	81a3      	strh	r3, [r4, #12]
 80017a2:	e7ad      	b.n	8001700 <__sflush_r+0x1c>
 80017a4:	690f      	ldr	r7, [r1, #16]
 80017a6:	2f00      	cmp	r7, #0
 80017a8:	d0a9      	beq.n	80016fe <__sflush_r+0x1a>
 80017aa:	0793      	lsls	r3, r2, #30
 80017ac:	680e      	ldr	r6, [r1, #0]
 80017ae:	bf08      	it	eq
 80017b0:	694b      	ldreq	r3, [r1, #20]
 80017b2:	600f      	str	r7, [r1, #0]
 80017b4:	bf18      	it	ne
 80017b6:	2300      	movne	r3, #0
 80017b8:	eba6 0807 	sub.w	r8, r6, r7
 80017bc:	608b      	str	r3, [r1, #8]
 80017be:	f1b8 0f00 	cmp.w	r8, #0
 80017c2:	dd9c      	ble.n	80016fe <__sflush_r+0x1a>
 80017c4:	4643      	mov	r3, r8
 80017c6:	463a      	mov	r2, r7
 80017c8:	6a21      	ldr	r1, [r4, #32]
 80017ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80017cc:	4628      	mov	r0, r5
 80017ce:	47b0      	blx	r6
 80017d0:	2800      	cmp	r0, #0
 80017d2:	dc06      	bgt.n	80017e2 <__sflush_r+0xfe>
 80017d4:	89a3      	ldrh	r3, [r4, #12]
 80017d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017da:	81a3      	strh	r3, [r4, #12]
 80017dc:	f04f 30ff 	mov.w	r0, #4294967295
 80017e0:	e78e      	b.n	8001700 <__sflush_r+0x1c>
 80017e2:	4407      	add	r7, r0
 80017e4:	eba8 0800 	sub.w	r8, r8, r0
 80017e8:	e7e9      	b.n	80017be <__sflush_r+0xda>
 80017ea:	bf00      	nop
 80017ec:	20400001 	.word	0x20400001

080017f0 <_fflush_r>:
 80017f0:	b538      	push	{r3, r4, r5, lr}
 80017f2:	690b      	ldr	r3, [r1, #16]
 80017f4:	4605      	mov	r5, r0
 80017f6:	460c      	mov	r4, r1
 80017f8:	b1db      	cbz	r3, 8001832 <_fflush_r+0x42>
 80017fa:	b118      	cbz	r0, 8001804 <_fflush_r+0x14>
 80017fc:	6983      	ldr	r3, [r0, #24]
 80017fe:	b90b      	cbnz	r3, 8001804 <_fflush_r+0x14>
 8001800:	f000 f860 	bl	80018c4 <__sinit>
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <_fflush_r+0x48>)
 8001806:	429c      	cmp	r4, r3
 8001808:	d109      	bne.n	800181e <_fflush_r+0x2e>
 800180a:	686c      	ldr	r4, [r5, #4]
 800180c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001810:	b17b      	cbz	r3, 8001832 <_fflush_r+0x42>
 8001812:	4621      	mov	r1, r4
 8001814:	4628      	mov	r0, r5
 8001816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800181a:	f7ff bf63 	b.w	80016e4 <__sflush_r>
 800181e:	4b07      	ldr	r3, [pc, #28]	; (800183c <_fflush_r+0x4c>)
 8001820:	429c      	cmp	r4, r3
 8001822:	d101      	bne.n	8001828 <_fflush_r+0x38>
 8001824:	68ac      	ldr	r4, [r5, #8]
 8001826:	e7f1      	b.n	800180c <_fflush_r+0x1c>
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <_fflush_r+0x50>)
 800182a:	429c      	cmp	r4, r3
 800182c:	bf08      	it	eq
 800182e:	68ec      	ldreq	r4, [r5, #12]
 8001830:	e7ec      	b.n	800180c <_fflush_r+0x1c>
 8001832:	2000      	movs	r0, #0
 8001834:	bd38      	pop	{r3, r4, r5, pc}
 8001836:	bf00      	nop
 8001838:	08002950 	.word	0x08002950
 800183c:	08002970 	.word	0x08002970
 8001840:	08002930 	.word	0x08002930

08001844 <std>:
 8001844:	2300      	movs	r3, #0
 8001846:	b510      	push	{r4, lr}
 8001848:	4604      	mov	r4, r0
 800184a:	e9c0 3300 	strd	r3, r3, [r0]
 800184e:	6083      	str	r3, [r0, #8]
 8001850:	8181      	strh	r1, [r0, #12]
 8001852:	6643      	str	r3, [r0, #100]	; 0x64
 8001854:	81c2      	strh	r2, [r0, #14]
 8001856:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800185a:	6183      	str	r3, [r0, #24]
 800185c:	4619      	mov	r1, r3
 800185e:	2208      	movs	r2, #8
 8001860:	305c      	adds	r0, #92	; 0x5c
 8001862:	f7ff fdfb 	bl	800145c <memset>
 8001866:	4b05      	ldr	r3, [pc, #20]	; (800187c <std+0x38>)
 8001868:	6263      	str	r3, [r4, #36]	; 0x24
 800186a:	4b05      	ldr	r3, [pc, #20]	; (8001880 <std+0x3c>)
 800186c:	62a3      	str	r3, [r4, #40]	; 0x28
 800186e:	4b05      	ldr	r3, [pc, #20]	; (8001884 <std+0x40>)
 8001870:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001872:	4b05      	ldr	r3, [pc, #20]	; (8001888 <std+0x44>)
 8001874:	6224      	str	r4, [r4, #32]
 8001876:	6323      	str	r3, [r4, #48]	; 0x30
 8001878:	bd10      	pop	{r4, pc}
 800187a:	bf00      	nop
 800187c:	0800219d 	.word	0x0800219d
 8001880:	080021bf 	.word	0x080021bf
 8001884:	080021f7 	.word	0x080021f7
 8001888:	0800221b 	.word	0x0800221b

0800188c <_cleanup_r>:
 800188c:	4901      	ldr	r1, [pc, #4]	; (8001894 <_cleanup_r+0x8>)
 800188e:	f000 b885 	b.w	800199c <_fwalk_reent>
 8001892:	bf00      	nop
 8001894:	080017f1 	.word	0x080017f1

08001898 <__sfmoreglue>:
 8001898:	b570      	push	{r4, r5, r6, lr}
 800189a:	1e4a      	subs	r2, r1, #1
 800189c:	2568      	movs	r5, #104	; 0x68
 800189e:	4355      	muls	r5, r2
 80018a0:	460e      	mov	r6, r1
 80018a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80018a6:	f000 f949 	bl	8001b3c <_malloc_r>
 80018aa:	4604      	mov	r4, r0
 80018ac:	b140      	cbz	r0, 80018c0 <__sfmoreglue+0x28>
 80018ae:	2100      	movs	r1, #0
 80018b0:	e9c0 1600 	strd	r1, r6, [r0]
 80018b4:	300c      	adds	r0, #12
 80018b6:	60a0      	str	r0, [r4, #8]
 80018b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80018bc:	f7ff fdce 	bl	800145c <memset>
 80018c0:	4620      	mov	r0, r4
 80018c2:	bd70      	pop	{r4, r5, r6, pc}

080018c4 <__sinit>:
 80018c4:	6983      	ldr	r3, [r0, #24]
 80018c6:	b510      	push	{r4, lr}
 80018c8:	4604      	mov	r4, r0
 80018ca:	bb33      	cbnz	r3, 800191a <__sinit+0x56>
 80018cc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80018d0:	6503      	str	r3, [r0, #80]	; 0x50
 80018d2:	4b12      	ldr	r3, [pc, #72]	; (800191c <__sinit+0x58>)
 80018d4:	4a12      	ldr	r2, [pc, #72]	; (8001920 <__sinit+0x5c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6282      	str	r2, [r0, #40]	; 0x28
 80018da:	4298      	cmp	r0, r3
 80018dc:	bf04      	itt	eq
 80018de:	2301      	moveq	r3, #1
 80018e0:	6183      	streq	r3, [r0, #24]
 80018e2:	f000 f81f 	bl	8001924 <__sfp>
 80018e6:	6060      	str	r0, [r4, #4]
 80018e8:	4620      	mov	r0, r4
 80018ea:	f000 f81b 	bl	8001924 <__sfp>
 80018ee:	60a0      	str	r0, [r4, #8]
 80018f0:	4620      	mov	r0, r4
 80018f2:	f000 f817 	bl	8001924 <__sfp>
 80018f6:	2200      	movs	r2, #0
 80018f8:	60e0      	str	r0, [r4, #12]
 80018fa:	2104      	movs	r1, #4
 80018fc:	6860      	ldr	r0, [r4, #4]
 80018fe:	f7ff ffa1 	bl	8001844 <std>
 8001902:	2201      	movs	r2, #1
 8001904:	2109      	movs	r1, #9
 8001906:	68a0      	ldr	r0, [r4, #8]
 8001908:	f7ff ff9c 	bl	8001844 <std>
 800190c:	2202      	movs	r2, #2
 800190e:	2112      	movs	r1, #18
 8001910:	68e0      	ldr	r0, [r4, #12]
 8001912:	f7ff ff97 	bl	8001844 <std>
 8001916:	2301      	movs	r3, #1
 8001918:	61a3      	str	r3, [r4, #24]
 800191a:	bd10      	pop	{r4, pc}
 800191c:	0800292c 	.word	0x0800292c
 8001920:	0800188d 	.word	0x0800188d

08001924 <__sfp>:
 8001924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001926:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <__sfp+0x70>)
 8001928:	681e      	ldr	r6, [r3, #0]
 800192a:	69b3      	ldr	r3, [r6, #24]
 800192c:	4607      	mov	r7, r0
 800192e:	b913      	cbnz	r3, 8001936 <__sfp+0x12>
 8001930:	4630      	mov	r0, r6
 8001932:	f7ff ffc7 	bl	80018c4 <__sinit>
 8001936:	3648      	adds	r6, #72	; 0x48
 8001938:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800193c:	3b01      	subs	r3, #1
 800193e:	d503      	bpl.n	8001948 <__sfp+0x24>
 8001940:	6833      	ldr	r3, [r6, #0]
 8001942:	b133      	cbz	r3, 8001952 <__sfp+0x2e>
 8001944:	6836      	ldr	r6, [r6, #0]
 8001946:	e7f7      	b.n	8001938 <__sfp+0x14>
 8001948:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800194c:	b16d      	cbz	r5, 800196a <__sfp+0x46>
 800194e:	3468      	adds	r4, #104	; 0x68
 8001950:	e7f4      	b.n	800193c <__sfp+0x18>
 8001952:	2104      	movs	r1, #4
 8001954:	4638      	mov	r0, r7
 8001956:	f7ff ff9f 	bl	8001898 <__sfmoreglue>
 800195a:	6030      	str	r0, [r6, #0]
 800195c:	2800      	cmp	r0, #0
 800195e:	d1f1      	bne.n	8001944 <__sfp+0x20>
 8001960:	230c      	movs	r3, #12
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	4604      	mov	r4, r0
 8001966:	4620      	mov	r0, r4
 8001968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800196a:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <__sfp+0x74>)
 800196c:	6665      	str	r5, [r4, #100]	; 0x64
 800196e:	e9c4 5500 	strd	r5, r5, [r4]
 8001972:	60a5      	str	r5, [r4, #8]
 8001974:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001978:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800197c:	2208      	movs	r2, #8
 800197e:	4629      	mov	r1, r5
 8001980:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001984:	f7ff fd6a 	bl	800145c <memset>
 8001988:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800198c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001990:	e7e9      	b.n	8001966 <__sfp+0x42>
 8001992:	bf00      	nop
 8001994:	0800292c 	.word	0x0800292c
 8001998:	ffff0001 	.word	0xffff0001

0800199c <_fwalk_reent>:
 800199c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80019a0:	4680      	mov	r8, r0
 80019a2:	4689      	mov	r9, r1
 80019a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80019a8:	2600      	movs	r6, #0
 80019aa:	b914      	cbnz	r4, 80019b2 <_fwalk_reent+0x16>
 80019ac:	4630      	mov	r0, r6
 80019ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80019b2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80019b6:	3f01      	subs	r7, #1
 80019b8:	d501      	bpl.n	80019be <_fwalk_reent+0x22>
 80019ba:	6824      	ldr	r4, [r4, #0]
 80019bc:	e7f5      	b.n	80019aa <_fwalk_reent+0xe>
 80019be:	89ab      	ldrh	r3, [r5, #12]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d907      	bls.n	80019d4 <_fwalk_reent+0x38>
 80019c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80019c8:	3301      	adds	r3, #1
 80019ca:	d003      	beq.n	80019d4 <_fwalk_reent+0x38>
 80019cc:	4629      	mov	r1, r5
 80019ce:	4640      	mov	r0, r8
 80019d0:	47c8      	blx	r9
 80019d2:	4306      	orrs	r6, r0
 80019d4:	3568      	adds	r5, #104	; 0x68
 80019d6:	e7ee      	b.n	80019b6 <_fwalk_reent+0x1a>

080019d8 <__swhatbuf_r>:
 80019d8:	b570      	push	{r4, r5, r6, lr}
 80019da:	460e      	mov	r6, r1
 80019dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019e0:	2900      	cmp	r1, #0
 80019e2:	b096      	sub	sp, #88	; 0x58
 80019e4:	4614      	mov	r4, r2
 80019e6:	461d      	mov	r5, r3
 80019e8:	da07      	bge.n	80019fa <__swhatbuf_r+0x22>
 80019ea:	2300      	movs	r3, #0
 80019ec:	602b      	str	r3, [r5, #0]
 80019ee:	89b3      	ldrh	r3, [r6, #12]
 80019f0:	061a      	lsls	r2, r3, #24
 80019f2:	d410      	bmi.n	8001a16 <__swhatbuf_r+0x3e>
 80019f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019f8:	e00e      	b.n	8001a18 <__swhatbuf_r+0x40>
 80019fa:	466a      	mov	r2, sp
 80019fc:	f000 fc34 	bl	8002268 <_fstat_r>
 8001a00:	2800      	cmp	r0, #0
 8001a02:	dbf2      	blt.n	80019ea <__swhatbuf_r+0x12>
 8001a04:	9a01      	ldr	r2, [sp, #4]
 8001a06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001a0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001a0e:	425a      	negs	r2, r3
 8001a10:	415a      	adcs	r2, r3
 8001a12:	602a      	str	r2, [r5, #0]
 8001a14:	e7ee      	b.n	80019f4 <__swhatbuf_r+0x1c>
 8001a16:	2340      	movs	r3, #64	; 0x40
 8001a18:	2000      	movs	r0, #0
 8001a1a:	6023      	str	r3, [r4, #0]
 8001a1c:	b016      	add	sp, #88	; 0x58
 8001a1e:	bd70      	pop	{r4, r5, r6, pc}

08001a20 <__smakebuf_r>:
 8001a20:	898b      	ldrh	r3, [r1, #12]
 8001a22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001a24:	079d      	lsls	r5, r3, #30
 8001a26:	4606      	mov	r6, r0
 8001a28:	460c      	mov	r4, r1
 8001a2a:	d507      	bpl.n	8001a3c <__smakebuf_r+0x1c>
 8001a2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001a30:	6023      	str	r3, [r4, #0]
 8001a32:	6123      	str	r3, [r4, #16]
 8001a34:	2301      	movs	r3, #1
 8001a36:	6163      	str	r3, [r4, #20]
 8001a38:	b002      	add	sp, #8
 8001a3a:	bd70      	pop	{r4, r5, r6, pc}
 8001a3c:	ab01      	add	r3, sp, #4
 8001a3e:	466a      	mov	r2, sp
 8001a40:	f7ff ffca 	bl	80019d8 <__swhatbuf_r>
 8001a44:	9900      	ldr	r1, [sp, #0]
 8001a46:	4605      	mov	r5, r0
 8001a48:	4630      	mov	r0, r6
 8001a4a:	f000 f877 	bl	8001b3c <_malloc_r>
 8001a4e:	b948      	cbnz	r0, 8001a64 <__smakebuf_r+0x44>
 8001a50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a54:	059a      	lsls	r2, r3, #22
 8001a56:	d4ef      	bmi.n	8001a38 <__smakebuf_r+0x18>
 8001a58:	f023 0303 	bic.w	r3, r3, #3
 8001a5c:	f043 0302 	orr.w	r3, r3, #2
 8001a60:	81a3      	strh	r3, [r4, #12]
 8001a62:	e7e3      	b.n	8001a2c <__smakebuf_r+0xc>
 8001a64:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <__smakebuf_r+0x7c>)
 8001a66:	62b3      	str	r3, [r6, #40]	; 0x28
 8001a68:	89a3      	ldrh	r3, [r4, #12]
 8001a6a:	6020      	str	r0, [r4, #0]
 8001a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a70:	81a3      	strh	r3, [r4, #12]
 8001a72:	9b00      	ldr	r3, [sp, #0]
 8001a74:	6163      	str	r3, [r4, #20]
 8001a76:	9b01      	ldr	r3, [sp, #4]
 8001a78:	6120      	str	r0, [r4, #16]
 8001a7a:	b15b      	cbz	r3, 8001a94 <__smakebuf_r+0x74>
 8001a7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a80:	4630      	mov	r0, r6
 8001a82:	f000 fc03 	bl	800228c <_isatty_r>
 8001a86:	b128      	cbz	r0, 8001a94 <__smakebuf_r+0x74>
 8001a88:	89a3      	ldrh	r3, [r4, #12]
 8001a8a:	f023 0303 	bic.w	r3, r3, #3
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	81a3      	strh	r3, [r4, #12]
 8001a94:	89a3      	ldrh	r3, [r4, #12]
 8001a96:	431d      	orrs	r5, r3
 8001a98:	81a5      	strh	r5, [r4, #12]
 8001a9a:	e7cd      	b.n	8001a38 <__smakebuf_r+0x18>
 8001a9c:	0800188d 	.word	0x0800188d

08001aa0 <_free_r>:
 8001aa0:	b538      	push	{r3, r4, r5, lr}
 8001aa2:	4605      	mov	r5, r0
 8001aa4:	2900      	cmp	r1, #0
 8001aa6:	d045      	beq.n	8001b34 <_free_r+0x94>
 8001aa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001aac:	1f0c      	subs	r4, r1, #4
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	bfb8      	it	lt
 8001ab2:	18e4      	addlt	r4, r4, r3
 8001ab4:	f000 fc0c 	bl	80022d0 <__malloc_lock>
 8001ab8:	4a1f      	ldr	r2, [pc, #124]	; (8001b38 <_free_r+0x98>)
 8001aba:	6813      	ldr	r3, [r2, #0]
 8001abc:	4610      	mov	r0, r2
 8001abe:	b933      	cbnz	r3, 8001ace <_free_r+0x2e>
 8001ac0:	6063      	str	r3, [r4, #4]
 8001ac2:	6014      	str	r4, [r2, #0]
 8001ac4:	4628      	mov	r0, r5
 8001ac6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001aca:	f000 bc02 	b.w	80022d2 <__malloc_unlock>
 8001ace:	42a3      	cmp	r3, r4
 8001ad0:	d90c      	bls.n	8001aec <_free_r+0x4c>
 8001ad2:	6821      	ldr	r1, [r4, #0]
 8001ad4:	1862      	adds	r2, r4, r1
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	bf04      	itt	eq
 8001ada:	681a      	ldreq	r2, [r3, #0]
 8001adc:	685b      	ldreq	r3, [r3, #4]
 8001ade:	6063      	str	r3, [r4, #4]
 8001ae0:	bf04      	itt	eq
 8001ae2:	1852      	addeq	r2, r2, r1
 8001ae4:	6022      	streq	r2, [r4, #0]
 8001ae6:	6004      	str	r4, [r0, #0]
 8001ae8:	e7ec      	b.n	8001ac4 <_free_r+0x24>
 8001aea:	4613      	mov	r3, r2
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	b10a      	cbz	r2, 8001af4 <_free_r+0x54>
 8001af0:	42a2      	cmp	r2, r4
 8001af2:	d9fa      	bls.n	8001aea <_free_r+0x4a>
 8001af4:	6819      	ldr	r1, [r3, #0]
 8001af6:	1858      	adds	r0, r3, r1
 8001af8:	42a0      	cmp	r0, r4
 8001afa:	d10b      	bne.n	8001b14 <_free_r+0x74>
 8001afc:	6820      	ldr	r0, [r4, #0]
 8001afe:	4401      	add	r1, r0
 8001b00:	1858      	adds	r0, r3, r1
 8001b02:	4282      	cmp	r2, r0
 8001b04:	6019      	str	r1, [r3, #0]
 8001b06:	d1dd      	bne.n	8001ac4 <_free_r+0x24>
 8001b08:	6810      	ldr	r0, [r2, #0]
 8001b0a:	6852      	ldr	r2, [r2, #4]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	4401      	add	r1, r0
 8001b10:	6019      	str	r1, [r3, #0]
 8001b12:	e7d7      	b.n	8001ac4 <_free_r+0x24>
 8001b14:	d902      	bls.n	8001b1c <_free_r+0x7c>
 8001b16:	230c      	movs	r3, #12
 8001b18:	602b      	str	r3, [r5, #0]
 8001b1a:	e7d3      	b.n	8001ac4 <_free_r+0x24>
 8001b1c:	6820      	ldr	r0, [r4, #0]
 8001b1e:	1821      	adds	r1, r4, r0
 8001b20:	428a      	cmp	r2, r1
 8001b22:	bf04      	itt	eq
 8001b24:	6811      	ldreq	r1, [r2, #0]
 8001b26:	6852      	ldreq	r2, [r2, #4]
 8001b28:	6062      	str	r2, [r4, #4]
 8001b2a:	bf04      	itt	eq
 8001b2c:	1809      	addeq	r1, r1, r0
 8001b2e:	6021      	streq	r1, [r4, #0]
 8001b30:	605c      	str	r4, [r3, #4]
 8001b32:	e7c7      	b.n	8001ac4 <_free_r+0x24>
 8001b34:	bd38      	pop	{r3, r4, r5, pc}
 8001b36:	bf00      	nop
 8001b38:	200000b0 	.word	0x200000b0

08001b3c <_malloc_r>:
 8001b3c:	b570      	push	{r4, r5, r6, lr}
 8001b3e:	1ccd      	adds	r5, r1, #3
 8001b40:	f025 0503 	bic.w	r5, r5, #3
 8001b44:	3508      	adds	r5, #8
 8001b46:	2d0c      	cmp	r5, #12
 8001b48:	bf38      	it	cc
 8001b4a:	250c      	movcc	r5, #12
 8001b4c:	2d00      	cmp	r5, #0
 8001b4e:	4606      	mov	r6, r0
 8001b50:	db01      	blt.n	8001b56 <_malloc_r+0x1a>
 8001b52:	42a9      	cmp	r1, r5
 8001b54:	d903      	bls.n	8001b5e <_malloc_r+0x22>
 8001b56:	230c      	movs	r3, #12
 8001b58:	6033      	str	r3, [r6, #0]
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	bd70      	pop	{r4, r5, r6, pc}
 8001b5e:	f000 fbb7 	bl	80022d0 <__malloc_lock>
 8001b62:	4a21      	ldr	r2, [pc, #132]	; (8001be8 <_malloc_r+0xac>)
 8001b64:	6814      	ldr	r4, [r2, #0]
 8001b66:	4621      	mov	r1, r4
 8001b68:	b991      	cbnz	r1, 8001b90 <_malloc_r+0x54>
 8001b6a:	4c20      	ldr	r4, [pc, #128]	; (8001bec <_malloc_r+0xb0>)
 8001b6c:	6823      	ldr	r3, [r4, #0]
 8001b6e:	b91b      	cbnz	r3, 8001b78 <_malloc_r+0x3c>
 8001b70:	4630      	mov	r0, r6
 8001b72:	f000 fb03 	bl	800217c <_sbrk_r>
 8001b76:	6020      	str	r0, [r4, #0]
 8001b78:	4629      	mov	r1, r5
 8001b7a:	4630      	mov	r0, r6
 8001b7c:	f000 fafe 	bl	800217c <_sbrk_r>
 8001b80:	1c43      	adds	r3, r0, #1
 8001b82:	d124      	bne.n	8001bce <_malloc_r+0x92>
 8001b84:	230c      	movs	r3, #12
 8001b86:	6033      	str	r3, [r6, #0]
 8001b88:	4630      	mov	r0, r6
 8001b8a:	f000 fba2 	bl	80022d2 <__malloc_unlock>
 8001b8e:	e7e4      	b.n	8001b5a <_malloc_r+0x1e>
 8001b90:	680b      	ldr	r3, [r1, #0]
 8001b92:	1b5b      	subs	r3, r3, r5
 8001b94:	d418      	bmi.n	8001bc8 <_malloc_r+0x8c>
 8001b96:	2b0b      	cmp	r3, #11
 8001b98:	d90f      	bls.n	8001bba <_malloc_r+0x7e>
 8001b9a:	600b      	str	r3, [r1, #0]
 8001b9c:	50cd      	str	r5, [r1, r3]
 8001b9e:	18cc      	adds	r4, r1, r3
 8001ba0:	4630      	mov	r0, r6
 8001ba2:	f000 fb96 	bl	80022d2 <__malloc_unlock>
 8001ba6:	f104 000b 	add.w	r0, r4, #11
 8001baa:	1d23      	adds	r3, r4, #4
 8001bac:	f020 0007 	bic.w	r0, r0, #7
 8001bb0:	1ac3      	subs	r3, r0, r3
 8001bb2:	d0d3      	beq.n	8001b5c <_malloc_r+0x20>
 8001bb4:	425a      	negs	r2, r3
 8001bb6:	50e2      	str	r2, [r4, r3]
 8001bb8:	e7d0      	b.n	8001b5c <_malloc_r+0x20>
 8001bba:	428c      	cmp	r4, r1
 8001bbc:	684b      	ldr	r3, [r1, #4]
 8001bbe:	bf16      	itet	ne
 8001bc0:	6063      	strne	r3, [r4, #4]
 8001bc2:	6013      	streq	r3, [r2, #0]
 8001bc4:	460c      	movne	r4, r1
 8001bc6:	e7eb      	b.n	8001ba0 <_malloc_r+0x64>
 8001bc8:	460c      	mov	r4, r1
 8001bca:	6849      	ldr	r1, [r1, #4]
 8001bcc:	e7cc      	b.n	8001b68 <_malloc_r+0x2c>
 8001bce:	1cc4      	adds	r4, r0, #3
 8001bd0:	f024 0403 	bic.w	r4, r4, #3
 8001bd4:	42a0      	cmp	r0, r4
 8001bd6:	d005      	beq.n	8001be4 <_malloc_r+0xa8>
 8001bd8:	1a21      	subs	r1, r4, r0
 8001bda:	4630      	mov	r0, r6
 8001bdc:	f000 face 	bl	800217c <_sbrk_r>
 8001be0:	3001      	adds	r0, #1
 8001be2:	d0cf      	beq.n	8001b84 <_malloc_r+0x48>
 8001be4:	6025      	str	r5, [r4, #0]
 8001be6:	e7db      	b.n	8001ba0 <_malloc_r+0x64>
 8001be8:	200000b0 	.word	0x200000b0
 8001bec:	200000b4 	.word	0x200000b4

08001bf0 <__sfputc_r>:
 8001bf0:	6893      	ldr	r3, [r2, #8]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	b410      	push	{r4}
 8001bf8:	6093      	str	r3, [r2, #8]
 8001bfa:	da07      	bge.n	8001c0c <__sfputc_r+0x1c>
 8001bfc:	6994      	ldr	r4, [r2, #24]
 8001bfe:	42a3      	cmp	r3, r4
 8001c00:	db01      	blt.n	8001c06 <__sfputc_r+0x16>
 8001c02:	290a      	cmp	r1, #10
 8001c04:	d102      	bne.n	8001c0c <__sfputc_r+0x1c>
 8001c06:	bc10      	pop	{r4}
 8001c08:	f7ff bcac 	b.w	8001564 <__swbuf_r>
 8001c0c:	6813      	ldr	r3, [r2, #0]
 8001c0e:	1c58      	adds	r0, r3, #1
 8001c10:	6010      	str	r0, [r2, #0]
 8001c12:	7019      	strb	r1, [r3, #0]
 8001c14:	4608      	mov	r0, r1
 8001c16:	bc10      	pop	{r4}
 8001c18:	4770      	bx	lr

08001c1a <__sfputs_r>:
 8001c1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c1c:	4606      	mov	r6, r0
 8001c1e:	460f      	mov	r7, r1
 8001c20:	4614      	mov	r4, r2
 8001c22:	18d5      	adds	r5, r2, r3
 8001c24:	42ac      	cmp	r4, r5
 8001c26:	d101      	bne.n	8001c2c <__sfputs_r+0x12>
 8001c28:	2000      	movs	r0, #0
 8001c2a:	e007      	b.n	8001c3c <__sfputs_r+0x22>
 8001c2c:	463a      	mov	r2, r7
 8001c2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c32:	4630      	mov	r0, r6
 8001c34:	f7ff ffdc 	bl	8001bf0 <__sfputc_r>
 8001c38:	1c43      	adds	r3, r0, #1
 8001c3a:	d1f3      	bne.n	8001c24 <__sfputs_r+0xa>
 8001c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001c40 <_vfiprintf_r>:
 8001c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c44:	460c      	mov	r4, r1
 8001c46:	b09d      	sub	sp, #116	; 0x74
 8001c48:	4617      	mov	r7, r2
 8001c4a:	461d      	mov	r5, r3
 8001c4c:	4606      	mov	r6, r0
 8001c4e:	b118      	cbz	r0, 8001c58 <_vfiprintf_r+0x18>
 8001c50:	6983      	ldr	r3, [r0, #24]
 8001c52:	b90b      	cbnz	r3, 8001c58 <_vfiprintf_r+0x18>
 8001c54:	f7ff fe36 	bl	80018c4 <__sinit>
 8001c58:	4b7c      	ldr	r3, [pc, #496]	; (8001e4c <_vfiprintf_r+0x20c>)
 8001c5a:	429c      	cmp	r4, r3
 8001c5c:	d158      	bne.n	8001d10 <_vfiprintf_r+0xd0>
 8001c5e:	6874      	ldr	r4, [r6, #4]
 8001c60:	89a3      	ldrh	r3, [r4, #12]
 8001c62:	0718      	lsls	r0, r3, #28
 8001c64:	d55e      	bpl.n	8001d24 <_vfiprintf_r+0xe4>
 8001c66:	6923      	ldr	r3, [r4, #16]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d05b      	beq.n	8001d24 <_vfiprintf_r+0xe4>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8001c70:	2320      	movs	r3, #32
 8001c72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001c76:	2330      	movs	r3, #48	; 0x30
 8001c78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001c7c:	9503      	str	r5, [sp, #12]
 8001c7e:	f04f 0b01 	mov.w	fp, #1
 8001c82:	46b8      	mov	r8, r7
 8001c84:	4645      	mov	r5, r8
 8001c86:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001c8a:	b10b      	cbz	r3, 8001c90 <_vfiprintf_r+0x50>
 8001c8c:	2b25      	cmp	r3, #37	; 0x25
 8001c8e:	d154      	bne.n	8001d3a <_vfiprintf_r+0xfa>
 8001c90:	ebb8 0a07 	subs.w	sl, r8, r7
 8001c94:	d00b      	beq.n	8001cae <_vfiprintf_r+0x6e>
 8001c96:	4653      	mov	r3, sl
 8001c98:	463a      	mov	r2, r7
 8001c9a:	4621      	mov	r1, r4
 8001c9c:	4630      	mov	r0, r6
 8001c9e:	f7ff ffbc 	bl	8001c1a <__sfputs_r>
 8001ca2:	3001      	adds	r0, #1
 8001ca4:	f000 80c2 	beq.w	8001e2c <_vfiprintf_r+0x1ec>
 8001ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001caa:	4453      	add	r3, sl
 8001cac:	9309      	str	r3, [sp, #36]	; 0x24
 8001cae:	f898 3000 	ldrb.w	r3, [r8]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 80ba 	beq.w	8001e2c <_vfiprintf_r+0x1ec>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f04f 32ff 	mov.w	r2, #4294967295
 8001cbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001cc2:	9304      	str	r3, [sp, #16]
 8001cc4:	9307      	str	r3, [sp, #28]
 8001cc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001cca:	931a      	str	r3, [sp, #104]	; 0x68
 8001ccc:	46a8      	mov	r8, r5
 8001cce:	2205      	movs	r2, #5
 8001cd0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001cd4:	485e      	ldr	r0, [pc, #376]	; (8001e50 <_vfiprintf_r+0x210>)
 8001cd6:	f7fe fa93 	bl	8000200 <memchr>
 8001cda:	9b04      	ldr	r3, [sp, #16]
 8001cdc:	bb78      	cbnz	r0, 8001d3e <_vfiprintf_r+0xfe>
 8001cde:	06d9      	lsls	r1, r3, #27
 8001ce0:	bf44      	itt	mi
 8001ce2:	2220      	movmi	r2, #32
 8001ce4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001ce8:	071a      	lsls	r2, r3, #28
 8001cea:	bf44      	itt	mi
 8001cec:	222b      	movmi	r2, #43	; 0x2b
 8001cee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001cf2:	782a      	ldrb	r2, [r5, #0]
 8001cf4:	2a2a      	cmp	r2, #42	; 0x2a
 8001cf6:	d02a      	beq.n	8001d4e <_vfiprintf_r+0x10e>
 8001cf8:	9a07      	ldr	r2, [sp, #28]
 8001cfa:	46a8      	mov	r8, r5
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	250a      	movs	r5, #10
 8001d00:	4641      	mov	r1, r8
 8001d02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d06:	3b30      	subs	r3, #48	; 0x30
 8001d08:	2b09      	cmp	r3, #9
 8001d0a:	d969      	bls.n	8001de0 <_vfiprintf_r+0x1a0>
 8001d0c:	b360      	cbz	r0, 8001d68 <_vfiprintf_r+0x128>
 8001d0e:	e024      	b.n	8001d5a <_vfiprintf_r+0x11a>
 8001d10:	4b50      	ldr	r3, [pc, #320]	; (8001e54 <_vfiprintf_r+0x214>)
 8001d12:	429c      	cmp	r4, r3
 8001d14:	d101      	bne.n	8001d1a <_vfiprintf_r+0xda>
 8001d16:	68b4      	ldr	r4, [r6, #8]
 8001d18:	e7a2      	b.n	8001c60 <_vfiprintf_r+0x20>
 8001d1a:	4b4f      	ldr	r3, [pc, #316]	; (8001e58 <_vfiprintf_r+0x218>)
 8001d1c:	429c      	cmp	r4, r3
 8001d1e:	bf08      	it	eq
 8001d20:	68f4      	ldreq	r4, [r6, #12]
 8001d22:	e79d      	b.n	8001c60 <_vfiprintf_r+0x20>
 8001d24:	4621      	mov	r1, r4
 8001d26:	4630      	mov	r0, r6
 8001d28:	f7ff fc6e 	bl	8001608 <__swsetup_r>
 8001d2c:	2800      	cmp	r0, #0
 8001d2e:	d09d      	beq.n	8001c6c <_vfiprintf_r+0x2c>
 8001d30:	f04f 30ff 	mov.w	r0, #4294967295
 8001d34:	b01d      	add	sp, #116	; 0x74
 8001d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d3a:	46a8      	mov	r8, r5
 8001d3c:	e7a2      	b.n	8001c84 <_vfiprintf_r+0x44>
 8001d3e:	4a44      	ldr	r2, [pc, #272]	; (8001e50 <_vfiprintf_r+0x210>)
 8001d40:	1a80      	subs	r0, r0, r2
 8001d42:	fa0b f000 	lsl.w	r0, fp, r0
 8001d46:	4318      	orrs	r0, r3
 8001d48:	9004      	str	r0, [sp, #16]
 8001d4a:	4645      	mov	r5, r8
 8001d4c:	e7be      	b.n	8001ccc <_vfiprintf_r+0x8c>
 8001d4e:	9a03      	ldr	r2, [sp, #12]
 8001d50:	1d11      	adds	r1, r2, #4
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	9103      	str	r1, [sp, #12]
 8001d56:	2a00      	cmp	r2, #0
 8001d58:	db01      	blt.n	8001d5e <_vfiprintf_r+0x11e>
 8001d5a:	9207      	str	r2, [sp, #28]
 8001d5c:	e004      	b.n	8001d68 <_vfiprintf_r+0x128>
 8001d5e:	4252      	negs	r2, r2
 8001d60:	f043 0302 	orr.w	r3, r3, #2
 8001d64:	9207      	str	r2, [sp, #28]
 8001d66:	9304      	str	r3, [sp, #16]
 8001d68:	f898 3000 	ldrb.w	r3, [r8]
 8001d6c:	2b2e      	cmp	r3, #46	; 0x2e
 8001d6e:	d10e      	bne.n	8001d8e <_vfiprintf_r+0x14e>
 8001d70:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001d74:	2b2a      	cmp	r3, #42	; 0x2a
 8001d76:	d138      	bne.n	8001dea <_vfiprintf_r+0x1aa>
 8001d78:	9b03      	ldr	r3, [sp, #12]
 8001d7a:	1d1a      	adds	r2, r3, #4
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	9203      	str	r2, [sp, #12]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	bfb8      	it	lt
 8001d84:	f04f 33ff 	movlt.w	r3, #4294967295
 8001d88:	f108 0802 	add.w	r8, r8, #2
 8001d8c:	9305      	str	r3, [sp, #20]
 8001d8e:	4d33      	ldr	r5, [pc, #204]	; (8001e5c <_vfiprintf_r+0x21c>)
 8001d90:	f898 1000 	ldrb.w	r1, [r8]
 8001d94:	2203      	movs	r2, #3
 8001d96:	4628      	mov	r0, r5
 8001d98:	f7fe fa32 	bl	8000200 <memchr>
 8001d9c:	b140      	cbz	r0, 8001db0 <_vfiprintf_r+0x170>
 8001d9e:	2340      	movs	r3, #64	; 0x40
 8001da0:	1b40      	subs	r0, r0, r5
 8001da2:	fa03 f000 	lsl.w	r0, r3, r0
 8001da6:	9b04      	ldr	r3, [sp, #16]
 8001da8:	4303      	orrs	r3, r0
 8001daa:	f108 0801 	add.w	r8, r8, #1
 8001dae:	9304      	str	r3, [sp, #16]
 8001db0:	f898 1000 	ldrb.w	r1, [r8]
 8001db4:	482a      	ldr	r0, [pc, #168]	; (8001e60 <_vfiprintf_r+0x220>)
 8001db6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001dba:	2206      	movs	r2, #6
 8001dbc:	f108 0701 	add.w	r7, r8, #1
 8001dc0:	f7fe fa1e 	bl	8000200 <memchr>
 8001dc4:	2800      	cmp	r0, #0
 8001dc6:	d037      	beq.n	8001e38 <_vfiprintf_r+0x1f8>
 8001dc8:	4b26      	ldr	r3, [pc, #152]	; (8001e64 <_vfiprintf_r+0x224>)
 8001dca:	bb1b      	cbnz	r3, 8001e14 <_vfiprintf_r+0x1d4>
 8001dcc:	9b03      	ldr	r3, [sp, #12]
 8001dce:	3307      	adds	r3, #7
 8001dd0:	f023 0307 	bic.w	r3, r3, #7
 8001dd4:	3308      	adds	r3, #8
 8001dd6:	9303      	str	r3, [sp, #12]
 8001dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001dda:	444b      	add	r3, r9
 8001ddc:	9309      	str	r3, [sp, #36]	; 0x24
 8001dde:	e750      	b.n	8001c82 <_vfiprintf_r+0x42>
 8001de0:	fb05 3202 	mla	r2, r5, r2, r3
 8001de4:	2001      	movs	r0, #1
 8001de6:	4688      	mov	r8, r1
 8001de8:	e78a      	b.n	8001d00 <_vfiprintf_r+0xc0>
 8001dea:	2300      	movs	r3, #0
 8001dec:	f108 0801 	add.w	r8, r8, #1
 8001df0:	9305      	str	r3, [sp, #20]
 8001df2:	4619      	mov	r1, r3
 8001df4:	250a      	movs	r5, #10
 8001df6:	4640      	mov	r0, r8
 8001df8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001dfc:	3a30      	subs	r2, #48	; 0x30
 8001dfe:	2a09      	cmp	r2, #9
 8001e00:	d903      	bls.n	8001e0a <_vfiprintf_r+0x1ca>
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d0c3      	beq.n	8001d8e <_vfiprintf_r+0x14e>
 8001e06:	9105      	str	r1, [sp, #20]
 8001e08:	e7c1      	b.n	8001d8e <_vfiprintf_r+0x14e>
 8001e0a:	fb05 2101 	mla	r1, r5, r1, r2
 8001e0e:	2301      	movs	r3, #1
 8001e10:	4680      	mov	r8, r0
 8001e12:	e7f0      	b.n	8001df6 <_vfiprintf_r+0x1b6>
 8001e14:	ab03      	add	r3, sp, #12
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	4622      	mov	r2, r4
 8001e1a:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <_vfiprintf_r+0x228>)
 8001e1c:	a904      	add	r1, sp, #16
 8001e1e:	4630      	mov	r0, r6
 8001e20:	f3af 8000 	nop.w
 8001e24:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001e28:	4681      	mov	r9, r0
 8001e2a:	d1d5      	bne.n	8001dd8 <_vfiprintf_r+0x198>
 8001e2c:	89a3      	ldrh	r3, [r4, #12]
 8001e2e:	065b      	lsls	r3, r3, #25
 8001e30:	f53f af7e 	bmi.w	8001d30 <_vfiprintf_r+0xf0>
 8001e34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001e36:	e77d      	b.n	8001d34 <_vfiprintf_r+0xf4>
 8001e38:	ab03      	add	r3, sp, #12
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	4622      	mov	r2, r4
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <_vfiprintf_r+0x228>)
 8001e40:	a904      	add	r1, sp, #16
 8001e42:	4630      	mov	r0, r6
 8001e44:	f000 f888 	bl	8001f58 <_printf_i>
 8001e48:	e7ec      	b.n	8001e24 <_vfiprintf_r+0x1e4>
 8001e4a:	bf00      	nop
 8001e4c:	08002950 	.word	0x08002950
 8001e50:	08002990 	.word	0x08002990
 8001e54:	08002970 	.word	0x08002970
 8001e58:	08002930 	.word	0x08002930
 8001e5c:	08002996 	.word	0x08002996
 8001e60:	0800299a 	.word	0x0800299a
 8001e64:	00000000 	.word	0x00000000
 8001e68:	08001c1b 	.word	0x08001c1b

08001e6c <_printf_common>:
 8001e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e70:	4691      	mov	r9, r2
 8001e72:	461f      	mov	r7, r3
 8001e74:	688a      	ldr	r2, [r1, #8]
 8001e76:	690b      	ldr	r3, [r1, #16]
 8001e78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	bfb8      	it	lt
 8001e80:	4613      	movlt	r3, r2
 8001e82:	f8c9 3000 	str.w	r3, [r9]
 8001e86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001e8a:	4606      	mov	r6, r0
 8001e8c:	460c      	mov	r4, r1
 8001e8e:	b112      	cbz	r2, 8001e96 <_printf_common+0x2a>
 8001e90:	3301      	adds	r3, #1
 8001e92:	f8c9 3000 	str.w	r3, [r9]
 8001e96:	6823      	ldr	r3, [r4, #0]
 8001e98:	0699      	lsls	r1, r3, #26
 8001e9a:	bf42      	ittt	mi
 8001e9c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001ea0:	3302      	addmi	r3, #2
 8001ea2:	f8c9 3000 	strmi.w	r3, [r9]
 8001ea6:	6825      	ldr	r5, [r4, #0]
 8001ea8:	f015 0506 	ands.w	r5, r5, #6
 8001eac:	d107      	bne.n	8001ebe <_printf_common+0x52>
 8001eae:	f104 0a19 	add.w	sl, r4, #25
 8001eb2:	68e3      	ldr	r3, [r4, #12]
 8001eb4:	f8d9 2000 	ldr.w	r2, [r9]
 8001eb8:	1a9b      	subs	r3, r3, r2
 8001eba:	42ab      	cmp	r3, r5
 8001ebc:	dc28      	bgt.n	8001f10 <_printf_common+0xa4>
 8001ebe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001ec2:	6822      	ldr	r2, [r4, #0]
 8001ec4:	3300      	adds	r3, #0
 8001ec6:	bf18      	it	ne
 8001ec8:	2301      	movne	r3, #1
 8001eca:	0692      	lsls	r2, r2, #26
 8001ecc:	d42d      	bmi.n	8001f2a <_printf_common+0xbe>
 8001ece:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ed2:	4639      	mov	r1, r7
 8001ed4:	4630      	mov	r0, r6
 8001ed6:	47c0      	blx	r8
 8001ed8:	3001      	adds	r0, #1
 8001eda:	d020      	beq.n	8001f1e <_printf_common+0xb2>
 8001edc:	6823      	ldr	r3, [r4, #0]
 8001ede:	68e5      	ldr	r5, [r4, #12]
 8001ee0:	f8d9 2000 	ldr.w	r2, [r9]
 8001ee4:	f003 0306 	and.w	r3, r3, #6
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	bf08      	it	eq
 8001eec:	1aad      	subeq	r5, r5, r2
 8001eee:	68a3      	ldr	r3, [r4, #8]
 8001ef0:	6922      	ldr	r2, [r4, #16]
 8001ef2:	bf0c      	ite	eq
 8001ef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001ef8:	2500      	movne	r5, #0
 8001efa:	4293      	cmp	r3, r2
 8001efc:	bfc4      	itt	gt
 8001efe:	1a9b      	subgt	r3, r3, r2
 8001f00:	18ed      	addgt	r5, r5, r3
 8001f02:	f04f 0900 	mov.w	r9, #0
 8001f06:	341a      	adds	r4, #26
 8001f08:	454d      	cmp	r5, r9
 8001f0a:	d11a      	bne.n	8001f42 <_printf_common+0xd6>
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	e008      	b.n	8001f22 <_printf_common+0xb6>
 8001f10:	2301      	movs	r3, #1
 8001f12:	4652      	mov	r2, sl
 8001f14:	4639      	mov	r1, r7
 8001f16:	4630      	mov	r0, r6
 8001f18:	47c0      	blx	r8
 8001f1a:	3001      	adds	r0, #1
 8001f1c:	d103      	bne.n	8001f26 <_printf_common+0xba>
 8001f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f26:	3501      	adds	r5, #1
 8001f28:	e7c3      	b.n	8001eb2 <_printf_common+0x46>
 8001f2a:	18e1      	adds	r1, r4, r3
 8001f2c:	1c5a      	adds	r2, r3, #1
 8001f2e:	2030      	movs	r0, #48	; 0x30
 8001f30:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001f34:	4422      	add	r2, r4
 8001f36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001f3a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001f3e:	3302      	adds	r3, #2
 8001f40:	e7c5      	b.n	8001ece <_printf_common+0x62>
 8001f42:	2301      	movs	r3, #1
 8001f44:	4622      	mov	r2, r4
 8001f46:	4639      	mov	r1, r7
 8001f48:	4630      	mov	r0, r6
 8001f4a:	47c0      	blx	r8
 8001f4c:	3001      	adds	r0, #1
 8001f4e:	d0e6      	beq.n	8001f1e <_printf_common+0xb2>
 8001f50:	f109 0901 	add.w	r9, r9, #1
 8001f54:	e7d8      	b.n	8001f08 <_printf_common+0x9c>
	...

08001f58 <_printf_i>:
 8001f58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f5c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001f60:	460c      	mov	r4, r1
 8001f62:	7e09      	ldrb	r1, [r1, #24]
 8001f64:	b085      	sub	sp, #20
 8001f66:	296e      	cmp	r1, #110	; 0x6e
 8001f68:	4617      	mov	r7, r2
 8001f6a:	4606      	mov	r6, r0
 8001f6c:	4698      	mov	r8, r3
 8001f6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001f70:	f000 80b3 	beq.w	80020da <_printf_i+0x182>
 8001f74:	d822      	bhi.n	8001fbc <_printf_i+0x64>
 8001f76:	2963      	cmp	r1, #99	; 0x63
 8001f78:	d036      	beq.n	8001fe8 <_printf_i+0x90>
 8001f7a:	d80a      	bhi.n	8001f92 <_printf_i+0x3a>
 8001f7c:	2900      	cmp	r1, #0
 8001f7e:	f000 80b9 	beq.w	80020f4 <_printf_i+0x19c>
 8001f82:	2958      	cmp	r1, #88	; 0x58
 8001f84:	f000 8083 	beq.w	800208e <_printf_i+0x136>
 8001f88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001f8c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001f90:	e032      	b.n	8001ff8 <_printf_i+0xa0>
 8001f92:	2964      	cmp	r1, #100	; 0x64
 8001f94:	d001      	beq.n	8001f9a <_printf_i+0x42>
 8001f96:	2969      	cmp	r1, #105	; 0x69
 8001f98:	d1f6      	bne.n	8001f88 <_printf_i+0x30>
 8001f9a:	6820      	ldr	r0, [r4, #0]
 8001f9c:	6813      	ldr	r3, [r2, #0]
 8001f9e:	0605      	lsls	r5, r0, #24
 8001fa0:	f103 0104 	add.w	r1, r3, #4
 8001fa4:	d52a      	bpl.n	8001ffc <_printf_i+0xa4>
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6011      	str	r1, [r2, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	da03      	bge.n	8001fb6 <_printf_i+0x5e>
 8001fae:	222d      	movs	r2, #45	; 0x2d
 8001fb0:	425b      	negs	r3, r3
 8001fb2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001fb6:	486f      	ldr	r0, [pc, #444]	; (8002174 <_printf_i+0x21c>)
 8001fb8:	220a      	movs	r2, #10
 8001fba:	e039      	b.n	8002030 <_printf_i+0xd8>
 8001fbc:	2973      	cmp	r1, #115	; 0x73
 8001fbe:	f000 809d 	beq.w	80020fc <_printf_i+0x1a4>
 8001fc2:	d808      	bhi.n	8001fd6 <_printf_i+0x7e>
 8001fc4:	296f      	cmp	r1, #111	; 0x6f
 8001fc6:	d020      	beq.n	800200a <_printf_i+0xb2>
 8001fc8:	2970      	cmp	r1, #112	; 0x70
 8001fca:	d1dd      	bne.n	8001f88 <_printf_i+0x30>
 8001fcc:	6823      	ldr	r3, [r4, #0]
 8001fce:	f043 0320 	orr.w	r3, r3, #32
 8001fd2:	6023      	str	r3, [r4, #0]
 8001fd4:	e003      	b.n	8001fde <_printf_i+0x86>
 8001fd6:	2975      	cmp	r1, #117	; 0x75
 8001fd8:	d017      	beq.n	800200a <_printf_i+0xb2>
 8001fda:	2978      	cmp	r1, #120	; 0x78
 8001fdc:	d1d4      	bne.n	8001f88 <_printf_i+0x30>
 8001fde:	2378      	movs	r3, #120	; 0x78
 8001fe0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001fe4:	4864      	ldr	r0, [pc, #400]	; (8002178 <_printf_i+0x220>)
 8001fe6:	e055      	b.n	8002094 <_printf_i+0x13c>
 8001fe8:	6813      	ldr	r3, [r2, #0]
 8001fea:	1d19      	adds	r1, r3, #4
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6011      	str	r1, [r2, #0]
 8001ff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ff4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e08c      	b.n	8002116 <_printf_i+0x1be>
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6011      	str	r1, [r2, #0]
 8002000:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002004:	bf18      	it	ne
 8002006:	b21b      	sxthne	r3, r3
 8002008:	e7cf      	b.n	8001faa <_printf_i+0x52>
 800200a:	6813      	ldr	r3, [r2, #0]
 800200c:	6825      	ldr	r5, [r4, #0]
 800200e:	1d18      	adds	r0, r3, #4
 8002010:	6010      	str	r0, [r2, #0]
 8002012:	0628      	lsls	r0, r5, #24
 8002014:	d501      	bpl.n	800201a <_printf_i+0xc2>
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	e002      	b.n	8002020 <_printf_i+0xc8>
 800201a:	0668      	lsls	r0, r5, #25
 800201c:	d5fb      	bpl.n	8002016 <_printf_i+0xbe>
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	4854      	ldr	r0, [pc, #336]	; (8002174 <_printf_i+0x21c>)
 8002022:	296f      	cmp	r1, #111	; 0x6f
 8002024:	bf14      	ite	ne
 8002026:	220a      	movne	r2, #10
 8002028:	2208      	moveq	r2, #8
 800202a:	2100      	movs	r1, #0
 800202c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002030:	6865      	ldr	r5, [r4, #4]
 8002032:	60a5      	str	r5, [r4, #8]
 8002034:	2d00      	cmp	r5, #0
 8002036:	f2c0 8095 	blt.w	8002164 <_printf_i+0x20c>
 800203a:	6821      	ldr	r1, [r4, #0]
 800203c:	f021 0104 	bic.w	r1, r1, #4
 8002040:	6021      	str	r1, [r4, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d13d      	bne.n	80020c2 <_printf_i+0x16a>
 8002046:	2d00      	cmp	r5, #0
 8002048:	f040 808e 	bne.w	8002168 <_printf_i+0x210>
 800204c:	4665      	mov	r5, ip
 800204e:	2a08      	cmp	r2, #8
 8002050:	d10b      	bne.n	800206a <_printf_i+0x112>
 8002052:	6823      	ldr	r3, [r4, #0]
 8002054:	07db      	lsls	r3, r3, #31
 8002056:	d508      	bpl.n	800206a <_printf_i+0x112>
 8002058:	6923      	ldr	r3, [r4, #16]
 800205a:	6862      	ldr	r2, [r4, #4]
 800205c:	429a      	cmp	r2, r3
 800205e:	bfde      	ittt	le
 8002060:	2330      	movle	r3, #48	; 0x30
 8002062:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002066:	f105 35ff 	addle.w	r5, r5, #4294967295
 800206a:	ebac 0305 	sub.w	r3, ip, r5
 800206e:	6123      	str	r3, [r4, #16]
 8002070:	f8cd 8000 	str.w	r8, [sp]
 8002074:	463b      	mov	r3, r7
 8002076:	aa03      	add	r2, sp, #12
 8002078:	4621      	mov	r1, r4
 800207a:	4630      	mov	r0, r6
 800207c:	f7ff fef6 	bl	8001e6c <_printf_common>
 8002080:	3001      	adds	r0, #1
 8002082:	d14d      	bne.n	8002120 <_printf_i+0x1c8>
 8002084:	f04f 30ff 	mov.w	r0, #4294967295
 8002088:	b005      	add	sp, #20
 800208a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800208e:	4839      	ldr	r0, [pc, #228]	; (8002174 <_printf_i+0x21c>)
 8002090:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002094:	6813      	ldr	r3, [r2, #0]
 8002096:	6821      	ldr	r1, [r4, #0]
 8002098:	1d1d      	adds	r5, r3, #4
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6015      	str	r5, [r2, #0]
 800209e:	060a      	lsls	r2, r1, #24
 80020a0:	d50b      	bpl.n	80020ba <_printf_i+0x162>
 80020a2:	07ca      	lsls	r2, r1, #31
 80020a4:	bf44      	itt	mi
 80020a6:	f041 0120 	orrmi.w	r1, r1, #32
 80020aa:	6021      	strmi	r1, [r4, #0]
 80020ac:	b91b      	cbnz	r3, 80020b6 <_printf_i+0x15e>
 80020ae:	6822      	ldr	r2, [r4, #0]
 80020b0:	f022 0220 	bic.w	r2, r2, #32
 80020b4:	6022      	str	r2, [r4, #0]
 80020b6:	2210      	movs	r2, #16
 80020b8:	e7b7      	b.n	800202a <_printf_i+0xd2>
 80020ba:	064d      	lsls	r5, r1, #25
 80020bc:	bf48      	it	mi
 80020be:	b29b      	uxthmi	r3, r3
 80020c0:	e7ef      	b.n	80020a2 <_printf_i+0x14a>
 80020c2:	4665      	mov	r5, ip
 80020c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80020c8:	fb02 3311 	mls	r3, r2, r1, r3
 80020cc:	5cc3      	ldrb	r3, [r0, r3]
 80020ce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80020d2:	460b      	mov	r3, r1
 80020d4:	2900      	cmp	r1, #0
 80020d6:	d1f5      	bne.n	80020c4 <_printf_i+0x16c>
 80020d8:	e7b9      	b.n	800204e <_printf_i+0xf6>
 80020da:	6813      	ldr	r3, [r2, #0]
 80020dc:	6825      	ldr	r5, [r4, #0]
 80020de:	6961      	ldr	r1, [r4, #20]
 80020e0:	1d18      	adds	r0, r3, #4
 80020e2:	6010      	str	r0, [r2, #0]
 80020e4:	0628      	lsls	r0, r5, #24
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	d501      	bpl.n	80020ee <_printf_i+0x196>
 80020ea:	6019      	str	r1, [r3, #0]
 80020ec:	e002      	b.n	80020f4 <_printf_i+0x19c>
 80020ee:	066a      	lsls	r2, r5, #25
 80020f0:	d5fb      	bpl.n	80020ea <_printf_i+0x192>
 80020f2:	8019      	strh	r1, [r3, #0]
 80020f4:	2300      	movs	r3, #0
 80020f6:	6123      	str	r3, [r4, #16]
 80020f8:	4665      	mov	r5, ip
 80020fa:	e7b9      	b.n	8002070 <_printf_i+0x118>
 80020fc:	6813      	ldr	r3, [r2, #0]
 80020fe:	1d19      	adds	r1, r3, #4
 8002100:	6011      	str	r1, [r2, #0]
 8002102:	681d      	ldr	r5, [r3, #0]
 8002104:	6862      	ldr	r2, [r4, #4]
 8002106:	2100      	movs	r1, #0
 8002108:	4628      	mov	r0, r5
 800210a:	f7fe f879 	bl	8000200 <memchr>
 800210e:	b108      	cbz	r0, 8002114 <_printf_i+0x1bc>
 8002110:	1b40      	subs	r0, r0, r5
 8002112:	6060      	str	r0, [r4, #4]
 8002114:	6863      	ldr	r3, [r4, #4]
 8002116:	6123      	str	r3, [r4, #16]
 8002118:	2300      	movs	r3, #0
 800211a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800211e:	e7a7      	b.n	8002070 <_printf_i+0x118>
 8002120:	6923      	ldr	r3, [r4, #16]
 8002122:	462a      	mov	r2, r5
 8002124:	4639      	mov	r1, r7
 8002126:	4630      	mov	r0, r6
 8002128:	47c0      	blx	r8
 800212a:	3001      	adds	r0, #1
 800212c:	d0aa      	beq.n	8002084 <_printf_i+0x12c>
 800212e:	6823      	ldr	r3, [r4, #0]
 8002130:	079b      	lsls	r3, r3, #30
 8002132:	d413      	bmi.n	800215c <_printf_i+0x204>
 8002134:	68e0      	ldr	r0, [r4, #12]
 8002136:	9b03      	ldr	r3, [sp, #12]
 8002138:	4298      	cmp	r0, r3
 800213a:	bfb8      	it	lt
 800213c:	4618      	movlt	r0, r3
 800213e:	e7a3      	b.n	8002088 <_printf_i+0x130>
 8002140:	2301      	movs	r3, #1
 8002142:	464a      	mov	r2, r9
 8002144:	4639      	mov	r1, r7
 8002146:	4630      	mov	r0, r6
 8002148:	47c0      	blx	r8
 800214a:	3001      	adds	r0, #1
 800214c:	d09a      	beq.n	8002084 <_printf_i+0x12c>
 800214e:	3501      	adds	r5, #1
 8002150:	68e3      	ldr	r3, [r4, #12]
 8002152:	9a03      	ldr	r2, [sp, #12]
 8002154:	1a9b      	subs	r3, r3, r2
 8002156:	42ab      	cmp	r3, r5
 8002158:	dcf2      	bgt.n	8002140 <_printf_i+0x1e8>
 800215a:	e7eb      	b.n	8002134 <_printf_i+0x1dc>
 800215c:	2500      	movs	r5, #0
 800215e:	f104 0919 	add.w	r9, r4, #25
 8002162:	e7f5      	b.n	8002150 <_printf_i+0x1f8>
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1ac      	bne.n	80020c2 <_printf_i+0x16a>
 8002168:	7803      	ldrb	r3, [r0, #0]
 800216a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800216e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002172:	e76c      	b.n	800204e <_printf_i+0xf6>
 8002174:	080029a1 	.word	0x080029a1
 8002178:	080029b2 	.word	0x080029b2

0800217c <_sbrk_r>:
 800217c:	b538      	push	{r3, r4, r5, lr}
 800217e:	4c06      	ldr	r4, [pc, #24]	; (8002198 <_sbrk_r+0x1c>)
 8002180:	2300      	movs	r3, #0
 8002182:	4605      	mov	r5, r0
 8002184:	4608      	mov	r0, r1
 8002186:	6023      	str	r3, [r4, #0]
 8002188:	f000 f9bc 	bl	8002504 <_sbrk>
 800218c:	1c43      	adds	r3, r0, #1
 800218e:	d102      	bne.n	8002196 <_sbrk_r+0x1a>
 8002190:	6823      	ldr	r3, [r4, #0]
 8002192:	b103      	cbz	r3, 8002196 <_sbrk_r+0x1a>
 8002194:	602b      	str	r3, [r5, #0]
 8002196:	bd38      	pop	{r3, r4, r5, pc}
 8002198:	20000590 	.word	0x20000590

0800219c <__sread>:
 800219c:	b510      	push	{r4, lr}
 800219e:	460c      	mov	r4, r1
 80021a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021a4:	f000 f896 	bl	80022d4 <_read_r>
 80021a8:	2800      	cmp	r0, #0
 80021aa:	bfab      	itete	ge
 80021ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80021ae:	89a3      	ldrhlt	r3, [r4, #12]
 80021b0:	181b      	addge	r3, r3, r0
 80021b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80021b6:	bfac      	ite	ge
 80021b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80021ba:	81a3      	strhlt	r3, [r4, #12]
 80021bc:	bd10      	pop	{r4, pc}

080021be <__swrite>:
 80021be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021c2:	461f      	mov	r7, r3
 80021c4:	898b      	ldrh	r3, [r1, #12]
 80021c6:	05db      	lsls	r3, r3, #23
 80021c8:	4605      	mov	r5, r0
 80021ca:	460c      	mov	r4, r1
 80021cc:	4616      	mov	r6, r2
 80021ce:	d505      	bpl.n	80021dc <__swrite+0x1e>
 80021d0:	2302      	movs	r3, #2
 80021d2:	2200      	movs	r2, #0
 80021d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021d8:	f000 f868 	bl	80022ac <_lseek_r>
 80021dc:	89a3      	ldrh	r3, [r4, #12]
 80021de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80021e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021e6:	81a3      	strh	r3, [r4, #12]
 80021e8:	4632      	mov	r2, r6
 80021ea:	463b      	mov	r3, r7
 80021ec:	4628      	mov	r0, r5
 80021ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80021f2:	f000 b817 	b.w	8002224 <_write_r>

080021f6 <__sseek>:
 80021f6:	b510      	push	{r4, lr}
 80021f8:	460c      	mov	r4, r1
 80021fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021fe:	f000 f855 	bl	80022ac <_lseek_r>
 8002202:	1c43      	adds	r3, r0, #1
 8002204:	89a3      	ldrh	r3, [r4, #12]
 8002206:	bf15      	itete	ne
 8002208:	6560      	strne	r0, [r4, #84]	; 0x54
 800220a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800220e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002212:	81a3      	strheq	r3, [r4, #12]
 8002214:	bf18      	it	ne
 8002216:	81a3      	strhne	r3, [r4, #12]
 8002218:	bd10      	pop	{r4, pc}

0800221a <__sclose>:
 800221a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800221e:	f000 b813 	b.w	8002248 <_close_r>
	...

08002224 <_write_r>:
 8002224:	b538      	push	{r3, r4, r5, lr}
 8002226:	4c07      	ldr	r4, [pc, #28]	; (8002244 <_write_r+0x20>)
 8002228:	4605      	mov	r5, r0
 800222a:	4608      	mov	r0, r1
 800222c:	4611      	mov	r1, r2
 800222e:	2200      	movs	r2, #0
 8002230:	6022      	str	r2, [r4, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	f000 f911 	bl	800245a <_write>
 8002238:	1c43      	adds	r3, r0, #1
 800223a:	d102      	bne.n	8002242 <_write_r+0x1e>
 800223c:	6823      	ldr	r3, [r4, #0]
 800223e:	b103      	cbz	r3, 8002242 <_write_r+0x1e>
 8002240:	602b      	str	r3, [r5, #0]
 8002242:	bd38      	pop	{r3, r4, r5, pc}
 8002244:	20000590 	.word	0x20000590

08002248 <_close_r>:
 8002248:	b538      	push	{r3, r4, r5, lr}
 800224a:	4c06      	ldr	r4, [pc, #24]	; (8002264 <_close_r+0x1c>)
 800224c:	2300      	movs	r3, #0
 800224e:	4605      	mov	r5, r0
 8002250:	4608      	mov	r0, r1
 8002252:	6023      	str	r3, [r4, #0]
 8002254:	f000 f930 	bl	80024b8 <_close>
 8002258:	1c43      	adds	r3, r0, #1
 800225a:	d102      	bne.n	8002262 <_close_r+0x1a>
 800225c:	6823      	ldr	r3, [r4, #0]
 800225e:	b103      	cbz	r3, 8002262 <_close_r+0x1a>
 8002260:	602b      	str	r3, [r5, #0]
 8002262:	bd38      	pop	{r3, r4, r5, pc}
 8002264:	20000590 	.word	0x20000590

08002268 <_fstat_r>:
 8002268:	b538      	push	{r3, r4, r5, lr}
 800226a:	4c07      	ldr	r4, [pc, #28]	; (8002288 <_fstat_r+0x20>)
 800226c:	2300      	movs	r3, #0
 800226e:	4605      	mov	r5, r0
 8002270:	4608      	mov	r0, r1
 8002272:	4611      	mov	r1, r2
 8002274:	6023      	str	r3, [r4, #0]
 8002276:	f000 f98a 	bl	800258e <_fstat>
 800227a:	1c43      	adds	r3, r0, #1
 800227c:	d102      	bne.n	8002284 <_fstat_r+0x1c>
 800227e:	6823      	ldr	r3, [r4, #0]
 8002280:	b103      	cbz	r3, 8002284 <_fstat_r+0x1c>
 8002282:	602b      	str	r3, [r5, #0]
 8002284:	bd38      	pop	{r3, r4, r5, pc}
 8002286:	bf00      	nop
 8002288:	20000590 	.word	0x20000590

0800228c <_isatty_r>:
 800228c:	b538      	push	{r3, r4, r5, lr}
 800228e:	4c06      	ldr	r4, [pc, #24]	; (80022a8 <_isatty_r+0x1c>)
 8002290:	2300      	movs	r3, #0
 8002292:	4605      	mov	r5, r0
 8002294:	4608      	mov	r0, r1
 8002296:	6023      	str	r3, [r4, #0]
 8002298:	f000 fade 	bl	8002858 <_isatty>
 800229c:	1c43      	adds	r3, r0, #1
 800229e:	d102      	bne.n	80022a6 <_isatty_r+0x1a>
 80022a0:	6823      	ldr	r3, [r4, #0]
 80022a2:	b103      	cbz	r3, 80022a6 <_isatty_r+0x1a>
 80022a4:	602b      	str	r3, [r5, #0]
 80022a6:	bd38      	pop	{r3, r4, r5, pc}
 80022a8:	20000590 	.word	0x20000590

080022ac <_lseek_r>:
 80022ac:	b538      	push	{r3, r4, r5, lr}
 80022ae:	4c07      	ldr	r4, [pc, #28]	; (80022cc <_lseek_r+0x20>)
 80022b0:	4605      	mov	r5, r0
 80022b2:	4608      	mov	r0, r1
 80022b4:	4611      	mov	r1, r2
 80022b6:	2200      	movs	r2, #0
 80022b8:	6022      	str	r2, [r4, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	f000 f8bb 	bl	8002436 <_lseek>
 80022c0:	1c43      	adds	r3, r0, #1
 80022c2:	d102      	bne.n	80022ca <_lseek_r+0x1e>
 80022c4:	6823      	ldr	r3, [r4, #0]
 80022c6:	b103      	cbz	r3, 80022ca <_lseek_r+0x1e>
 80022c8:	602b      	str	r3, [r5, #0]
 80022ca:	bd38      	pop	{r3, r4, r5, pc}
 80022cc:	20000590 	.word	0x20000590

080022d0 <__malloc_lock>:
 80022d0:	4770      	bx	lr

080022d2 <__malloc_unlock>:
 80022d2:	4770      	bx	lr

080022d4 <_read_r>:
 80022d4:	b538      	push	{r3, r4, r5, lr}
 80022d6:	4c07      	ldr	r4, [pc, #28]	; (80022f4 <_read_r+0x20>)
 80022d8:	4605      	mov	r5, r0
 80022da:	4608      	mov	r0, r1
 80022dc:	4611      	mov	r1, r2
 80022de:	2200      	movs	r2, #0
 80022e0:	6022      	str	r2, [r4, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	f000 f850 	bl	8002388 <_read>
 80022e8:	1c43      	adds	r3, r0, #1
 80022ea:	d102      	bne.n	80022f2 <_read_r+0x1e>
 80022ec:	6823      	ldr	r3, [r4, #0]
 80022ee:	b103      	cbz	r3, 80022f2 <_read_r+0x1e>
 80022f0:	602b      	str	r3, [r5, #0]
 80022f2:	bd38      	pop	{r3, r4, r5, pc}
 80022f4:	20000590 	.word	0x20000590

080022f8 <findslot>:
 80022f8:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <findslot+0x2c>)
 80022fa:	b510      	push	{r4, lr}
 80022fc:	4604      	mov	r4, r0
 80022fe:	6818      	ldr	r0, [r3, #0]
 8002300:	b118      	cbz	r0, 800230a <findslot+0x12>
 8002302:	6983      	ldr	r3, [r0, #24]
 8002304:	b90b      	cbnz	r3, 800230a <findslot+0x12>
 8002306:	f7ff fadd 	bl	80018c4 <__sinit>
 800230a:	2c13      	cmp	r4, #19
 800230c:	d807      	bhi.n	800231e <findslot+0x26>
 800230e:	4806      	ldr	r0, [pc, #24]	; (8002328 <findslot+0x30>)
 8002310:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8002314:	3301      	adds	r3, #1
 8002316:	d002      	beq.n	800231e <findslot+0x26>
 8002318:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800231c:	bd10      	pop	{r4, pc}
 800231e:	2000      	movs	r0, #0
 8002320:	e7fc      	b.n	800231c <findslot+0x24>
 8002322:	bf00      	nop
 8002324:	20000020 	.word	0x20000020
 8002328:	200000c8 	.word	0x200000c8

0800232c <checkerror>:
 800232c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800232e:	1c43      	adds	r3, r0, #1
 8002330:	4605      	mov	r5, r0
 8002332:	d109      	bne.n	8002348 <checkerror+0x1c>
 8002334:	f000 faac 	bl	8002890 <__errno>
 8002338:	2413      	movs	r4, #19
 800233a:	4606      	mov	r6, r0
 800233c:	2700      	movs	r7, #0
 800233e:	4620      	mov	r0, r4
 8002340:	4639      	mov	r1, r7
 8002342:	beab      	bkpt	0x00ab
 8002344:	4604      	mov	r4, r0
 8002346:	6034      	str	r4, [r6, #0]
 8002348:	4628      	mov	r0, r5
 800234a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800234c <error>:
 800234c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800234e:	4605      	mov	r5, r0
 8002350:	f000 fa9e 	bl	8002890 <__errno>
 8002354:	2413      	movs	r4, #19
 8002356:	4606      	mov	r6, r0
 8002358:	2700      	movs	r7, #0
 800235a:	4620      	mov	r0, r4
 800235c:	4639      	mov	r1, r7
 800235e:	beab      	bkpt	0x00ab
 8002360:	4604      	mov	r4, r0
 8002362:	6034      	str	r4, [r6, #0]
 8002364:	4628      	mov	r0, r5
 8002366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002368 <_swiread>:
 8002368:	b530      	push	{r4, r5, lr}
 800236a:	b085      	sub	sp, #20
 800236c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002370:	9203      	str	r2, [sp, #12]
 8002372:	2406      	movs	r4, #6
 8002374:	ad01      	add	r5, sp, #4
 8002376:	4620      	mov	r0, r4
 8002378:	4629      	mov	r1, r5
 800237a:	beab      	bkpt	0x00ab
 800237c:	4604      	mov	r4, r0
 800237e:	4620      	mov	r0, r4
 8002380:	f7ff ffd4 	bl	800232c <checkerror>
 8002384:	b005      	add	sp, #20
 8002386:	bd30      	pop	{r4, r5, pc}

08002388 <_read>:
 8002388:	b570      	push	{r4, r5, r6, lr}
 800238a:	460e      	mov	r6, r1
 800238c:	4615      	mov	r5, r2
 800238e:	f7ff ffb3 	bl	80022f8 <findslot>
 8002392:	4604      	mov	r4, r0
 8002394:	b930      	cbnz	r0, 80023a4 <_read+0x1c>
 8002396:	f000 fa7b 	bl	8002890 <__errno>
 800239a:	2309      	movs	r3, #9
 800239c:	6003      	str	r3, [r0, #0]
 800239e:	f04f 30ff 	mov.w	r0, #4294967295
 80023a2:	bd70      	pop	{r4, r5, r6, pc}
 80023a4:	462a      	mov	r2, r5
 80023a6:	4631      	mov	r1, r6
 80023a8:	6800      	ldr	r0, [r0, #0]
 80023aa:	f7ff ffdd 	bl	8002368 <_swiread>
 80023ae:	1c43      	adds	r3, r0, #1
 80023b0:	bf1f      	itttt	ne
 80023b2:	6863      	ldrne	r3, [r4, #4]
 80023b4:	1a28      	subne	r0, r5, r0
 80023b6:	181b      	addne	r3, r3, r0
 80023b8:	6063      	strne	r3, [r4, #4]
 80023ba:	e7f2      	b.n	80023a2 <_read+0x1a>

080023bc <_swilseek>:
 80023bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80023be:	460c      	mov	r4, r1
 80023c0:	4616      	mov	r6, r2
 80023c2:	f7ff ff99 	bl	80022f8 <findslot>
 80023c6:	4605      	mov	r5, r0
 80023c8:	b940      	cbnz	r0, 80023dc <_swilseek+0x20>
 80023ca:	f000 fa61 	bl	8002890 <__errno>
 80023ce:	2309      	movs	r3, #9
 80023d0:	6003      	str	r3, [r0, #0]
 80023d2:	f04f 34ff 	mov.w	r4, #4294967295
 80023d6:	4620      	mov	r0, r4
 80023d8:	b003      	add	sp, #12
 80023da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023dc:	2e02      	cmp	r6, #2
 80023de:	d903      	bls.n	80023e8 <_swilseek+0x2c>
 80023e0:	f000 fa56 	bl	8002890 <__errno>
 80023e4:	2316      	movs	r3, #22
 80023e6:	e7f3      	b.n	80023d0 <_swilseek+0x14>
 80023e8:	2e01      	cmp	r6, #1
 80023ea:	d112      	bne.n	8002412 <_swilseek+0x56>
 80023ec:	6843      	ldr	r3, [r0, #4]
 80023ee:	18e4      	adds	r4, r4, r3
 80023f0:	d4f6      	bmi.n	80023e0 <_swilseek+0x24>
 80023f2:	682b      	ldr	r3, [r5, #0]
 80023f4:	260a      	movs	r6, #10
 80023f6:	e9cd 3400 	strd	r3, r4, [sp]
 80023fa:	466f      	mov	r7, sp
 80023fc:	4630      	mov	r0, r6
 80023fe:	4639      	mov	r1, r7
 8002400:	beab      	bkpt	0x00ab
 8002402:	4606      	mov	r6, r0
 8002404:	4630      	mov	r0, r6
 8002406:	f7ff ff91 	bl	800232c <checkerror>
 800240a:	2800      	cmp	r0, #0
 800240c:	dbe1      	blt.n	80023d2 <_swilseek+0x16>
 800240e:	606c      	str	r4, [r5, #4]
 8002410:	e7e1      	b.n	80023d6 <_swilseek+0x1a>
 8002412:	2e02      	cmp	r6, #2
 8002414:	d1ed      	bne.n	80023f2 <_swilseek+0x36>
 8002416:	af02      	add	r7, sp, #8
 8002418:	6803      	ldr	r3, [r0, #0]
 800241a:	f847 3d08 	str.w	r3, [r7, #-8]!
 800241e:	260c      	movs	r6, #12
 8002420:	4630      	mov	r0, r6
 8002422:	4639      	mov	r1, r7
 8002424:	beab      	bkpt	0x00ab
 8002426:	4606      	mov	r6, r0
 8002428:	4630      	mov	r0, r6
 800242a:	f7ff ff7f 	bl	800232c <checkerror>
 800242e:	1c43      	adds	r3, r0, #1
 8002430:	d0cf      	beq.n	80023d2 <_swilseek+0x16>
 8002432:	4404      	add	r4, r0
 8002434:	e7dd      	b.n	80023f2 <_swilseek+0x36>

08002436 <_lseek>:
 8002436:	f7ff bfc1 	b.w	80023bc <_swilseek>

0800243a <_swiwrite>:
 800243a:	b530      	push	{r4, r5, lr}
 800243c:	b085      	sub	sp, #20
 800243e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002442:	9203      	str	r2, [sp, #12]
 8002444:	2405      	movs	r4, #5
 8002446:	ad01      	add	r5, sp, #4
 8002448:	4620      	mov	r0, r4
 800244a:	4629      	mov	r1, r5
 800244c:	beab      	bkpt	0x00ab
 800244e:	4604      	mov	r4, r0
 8002450:	4620      	mov	r0, r4
 8002452:	f7ff ff6b 	bl	800232c <checkerror>
 8002456:	b005      	add	sp, #20
 8002458:	bd30      	pop	{r4, r5, pc}

0800245a <_write>:
 800245a:	b570      	push	{r4, r5, r6, lr}
 800245c:	460e      	mov	r6, r1
 800245e:	4615      	mov	r5, r2
 8002460:	f7ff ff4a 	bl	80022f8 <findslot>
 8002464:	4604      	mov	r4, r0
 8002466:	b930      	cbnz	r0, 8002476 <_write+0x1c>
 8002468:	f000 fa12 	bl	8002890 <__errno>
 800246c:	2309      	movs	r3, #9
 800246e:	6003      	str	r3, [r0, #0]
 8002470:	f04f 30ff 	mov.w	r0, #4294967295
 8002474:	bd70      	pop	{r4, r5, r6, pc}
 8002476:	462a      	mov	r2, r5
 8002478:	4631      	mov	r1, r6
 800247a:	6800      	ldr	r0, [r0, #0]
 800247c:	f7ff ffdd 	bl	800243a <_swiwrite>
 8002480:	1e02      	subs	r2, r0, #0
 8002482:	dbf5      	blt.n	8002470 <_write+0x16>
 8002484:	6863      	ldr	r3, [r4, #4]
 8002486:	1aa8      	subs	r0, r5, r2
 8002488:	4403      	add	r3, r0
 800248a:	42aa      	cmp	r2, r5
 800248c:	6063      	str	r3, [r4, #4]
 800248e:	d1f1      	bne.n	8002474 <_write+0x1a>
 8002490:	2000      	movs	r0, #0
 8002492:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002496:	f7ff bf59 	b.w	800234c <error>

0800249a <_swiclose>:
 800249a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800249c:	ad02      	add	r5, sp, #8
 800249e:	2402      	movs	r4, #2
 80024a0:	f845 0d04 	str.w	r0, [r5, #-4]!
 80024a4:	4620      	mov	r0, r4
 80024a6:	4629      	mov	r1, r5
 80024a8:	beab      	bkpt	0x00ab
 80024aa:	4604      	mov	r4, r0
 80024ac:	4620      	mov	r0, r4
 80024ae:	f7ff ff3d 	bl	800232c <checkerror>
 80024b2:	b003      	add	sp, #12
 80024b4:	bd30      	pop	{r4, r5, pc}
	...

080024b8 <_close>:
 80024b8:	b538      	push	{r3, r4, r5, lr}
 80024ba:	4605      	mov	r5, r0
 80024bc:	f7ff ff1c 	bl	80022f8 <findslot>
 80024c0:	4604      	mov	r4, r0
 80024c2:	b930      	cbnz	r0, 80024d2 <_close+0x1a>
 80024c4:	f000 f9e4 	bl	8002890 <__errno>
 80024c8:	2309      	movs	r3, #9
 80024ca:	6003      	str	r3, [r0, #0]
 80024cc:	f04f 30ff 	mov.w	r0, #4294967295
 80024d0:	bd38      	pop	{r3, r4, r5, pc}
 80024d2:	3d01      	subs	r5, #1
 80024d4:	2d01      	cmp	r5, #1
 80024d6:	d809      	bhi.n	80024ec <_close+0x34>
 80024d8:	4b09      	ldr	r3, [pc, #36]	; (8002500 <_close+0x48>)
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d104      	bne.n	80024ec <_close+0x34>
 80024e2:	f04f 33ff 	mov.w	r3, #4294967295
 80024e6:	6003      	str	r3, [r0, #0]
 80024e8:	2000      	movs	r0, #0
 80024ea:	e7f1      	b.n	80024d0 <_close+0x18>
 80024ec:	6820      	ldr	r0, [r4, #0]
 80024ee:	f7ff ffd4 	bl	800249a <_swiclose>
 80024f2:	2800      	cmp	r0, #0
 80024f4:	d1ec      	bne.n	80024d0 <_close+0x18>
 80024f6:	f04f 33ff 	mov.w	r3, #4294967295
 80024fa:	6023      	str	r3, [r4, #0]
 80024fc:	e7e8      	b.n	80024d0 <_close+0x18>
 80024fe:	bf00      	nop
 8002500:	200000c8 	.word	0x200000c8

08002504 <_sbrk>:
 8002504:	4b0d      	ldr	r3, [pc, #52]	; (800253c <_sbrk+0x38>)
 8002506:	6819      	ldr	r1, [r3, #0]
 8002508:	b510      	push	{r4, lr}
 800250a:	4602      	mov	r2, r0
 800250c:	b909      	cbnz	r1, 8002512 <_sbrk+0xe>
 800250e:	490c      	ldr	r1, [pc, #48]	; (8002540 <_sbrk+0x3c>)
 8002510:	6019      	str	r1, [r3, #0]
 8002512:	6818      	ldr	r0, [r3, #0]
 8002514:	4669      	mov	r1, sp
 8002516:	4402      	add	r2, r0
 8002518:	428a      	cmp	r2, r1
 800251a:	d806      	bhi.n	800252a <_sbrk+0x26>
 800251c:	4909      	ldr	r1, [pc, #36]	; (8002544 <_sbrk+0x40>)
 800251e:	4c0a      	ldr	r4, [pc, #40]	; (8002548 <_sbrk+0x44>)
 8002520:	6809      	ldr	r1, [r1, #0]
 8002522:	42a1      	cmp	r1, r4
 8002524:	d008      	beq.n	8002538 <_sbrk+0x34>
 8002526:	428a      	cmp	r2, r1
 8002528:	d906      	bls.n	8002538 <_sbrk+0x34>
 800252a:	f000 f9b1 	bl	8002890 <__errno>
 800252e:	230c      	movs	r3, #12
 8002530:	6003      	str	r3, [r0, #0]
 8002532:	f04f 30ff 	mov.w	r0, #4294967295
 8002536:	bd10      	pop	{r4, pc}
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	e7fc      	b.n	8002536 <_sbrk+0x32>
 800253c:	200000b8 	.word	0x200000b8
 8002540:	20000598 	.word	0x20000598
 8002544:	20000084 	.word	0x20000084
 8002548:	cafedead 	.word	0xcafedead

0800254c <_swistat>:
 800254c:	b570      	push	{r4, r5, r6, lr}
 800254e:	460c      	mov	r4, r1
 8002550:	f7ff fed2 	bl	80022f8 <findslot>
 8002554:	4606      	mov	r6, r0
 8002556:	b930      	cbnz	r0, 8002566 <_swistat+0x1a>
 8002558:	f000 f99a 	bl	8002890 <__errno>
 800255c:	2309      	movs	r3, #9
 800255e:	6003      	str	r3, [r0, #0]
 8002560:	f04f 30ff 	mov.w	r0, #4294967295
 8002564:	bd70      	pop	{r4, r5, r6, pc}
 8002566:	6863      	ldr	r3, [r4, #4]
 8002568:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800256c:	6063      	str	r3, [r4, #4]
 800256e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002572:	6463      	str	r3, [r4, #68]	; 0x44
 8002574:	250c      	movs	r5, #12
 8002576:	4628      	mov	r0, r5
 8002578:	4631      	mov	r1, r6
 800257a:	beab      	bkpt	0x00ab
 800257c:	4605      	mov	r5, r0
 800257e:	4628      	mov	r0, r5
 8002580:	f7ff fed4 	bl	800232c <checkerror>
 8002584:	1c43      	adds	r3, r0, #1
 8002586:	bf1c      	itt	ne
 8002588:	6120      	strne	r0, [r4, #16]
 800258a:	2000      	movne	r0, #0
 800258c:	e7ea      	b.n	8002564 <_swistat+0x18>

0800258e <_fstat>:
 800258e:	460b      	mov	r3, r1
 8002590:	b510      	push	{r4, lr}
 8002592:	2100      	movs	r1, #0
 8002594:	4604      	mov	r4, r0
 8002596:	2258      	movs	r2, #88	; 0x58
 8002598:	4618      	mov	r0, r3
 800259a:	f7fe ff5f 	bl	800145c <memset>
 800259e:	4601      	mov	r1, r0
 80025a0:	4620      	mov	r0, r4
 80025a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025a6:	f7ff bfd1 	b.w	800254c <_swistat>

080025aa <_stat>:
 80025aa:	b538      	push	{r3, r4, r5, lr}
 80025ac:	460d      	mov	r5, r1
 80025ae:	4604      	mov	r4, r0
 80025b0:	2258      	movs	r2, #88	; 0x58
 80025b2:	2100      	movs	r1, #0
 80025b4:	4628      	mov	r0, r5
 80025b6:	f7fe ff51 	bl	800145c <memset>
 80025ba:	4620      	mov	r0, r4
 80025bc:	2100      	movs	r1, #0
 80025be:	f000 f811 	bl	80025e4 <_swiopen>
 80025c2:	1c43      	adds	r3, r0, #1
 80025c4:	4604      	mov	r4, r0
 80025c6:	d00b      	beq.n	80025e0 <_stat+0x36>
 80025c8:	686b      	ldr	r3, [r5, #4]
 80025ca:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80025ce:	606b      	str	r3, [r5, #4]
 80025d0:	4629      	mov	r1, r5
 80025d2:	f7ff ffbb 	bl	800254c <_swistat>
 80025d6:	4605      	mov	r5, r0
 80025d8:	4620      	mov	r0, r4
 80025da:	f7ff ff6d 	bl	80024b8 <_close>
 80025de:	462c      	mov	r4, r5
 80025e0:	4620      	mov	r0, r4
 80025e2:	bd38      	pop	{r3, r4, r5, pc}

080025e4 <_swiopen>:
 80025e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025e8:	4b2b      	ldr	r3, [pc, #172]	; (8002698 <_swiopen+0xb4>)
 80025ea:	b096      	sub	sp, #88	; 0x58
 80025ec:	4682      	mov	sl, r0
 80025ee:	460e      	mov	r6, r1
 80025f0:	2500      	movs	r5, #0
 80025f2:	4698      	mov	r8, r3
 80025f4:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 80025f8:	1c61      	adds	r1, r4, #1
 80025fa:	ea4f 07c5 	mov.w	r7, r5, lsl #3
 80025fe:	d036      	beq.n	800266e <_swiopen+0x8a>
 8002600:	3501      	adds	r5, #1
 8002602:	2d14      	cmp	r5, #20
 8002604:	d1f6      	bne.n	80025f4 <_swiopen+0x10>
 8002606:	f000 f943 	bl	8002890 <__errno>
 800260a:	2318      	movs	r3, #24
 800260c:	6003      	str	r3, [r0, #0]
 800260e:	f04f 34ff 	mov.w	r4, #4294967295
 8002612:	e03c      	b.n	800268e <_swiopen+0xaa>
 8002614:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8002618:	f240 6301 	movw	r3, #1537	; 0x601
 800261c:	07b2      	lsls	r2, r6, #30
 800261e:	bf48      	it	mi
 8002620:	f044 0402 	orrmi.w	r4, r4, #2
 8002624:	421e      	tst	r6, r3
 8002626:	bf18      	it	ne
 8002628:	f044 0404 	orrne.w	r4, r4, #4
 800262c:	0733      	lsls	r3, r6, #28
 800262e:	bf48      	it	mi
 8002630:	f024 0404 	bicmi.w	r4, r4, #4
 8002634:	4650      	mov	r0, sl
 8002636:	bf48      	it	mi
 8002638:	f044 0408 	orrmi.w	r4, r4, #8
 800263c:	f8cd a000 	str.w	sl, [sp]
 8002640:	f7fd fdd6 	bl	80001f0 <strlen>
 8002644:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8002648:	2401      	movs	r4, #1
 800264a:	4620      	mov	r0, r4
 800264c:	4649      	mov	r1, r9
 800264e:	beab      	bkpt	0x00ab
 8002650:	4604      	mov	r4, r0
 8002652:	2c00      	cmp	r4, #0
 8002654:	db06      	blt.n	8002664 <_swiopen+0x80>
 8002656:	4447      	add	r7, r8
 8002658:	2300      	movs	r3, #0
 800265a:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 800265e:	607b      	str	r3, [r7, #4]
 8002660:	462c      	mov	r4, r5
 8002662:	e014      	b.n	800268e <_swiopen+0xaa>
 8002664:	4620      	mov	r0, r4
 8002666:	f7ff fe71 	bl	800234c <error>
 800266a:	4604      	mov	r4, r0
 800266c:	e00f      	b.n	800268e <_swiopen+0xaa>
 800266e:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8002672:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002676:	46e9      	mov	r9, sp
 8002678:	d1cc      	bne.n	8002614 <_swiopen+0x30>
 800267a:	4649      	mov	r1, r9
 800267c:	4650      	mov	r0, sl
 800267e:	f7ff ff94 	bl	80025aa <_stat>
 8002682:	3001      	adds	r0, #1
 8002684:	d0c6      	beq.n	8002614 <_swiopen+0x30>
 8002686:	f000 f903 	bl	8002890 <__errno>
 800268a:	2311      	movs	r3, #17
 800268c:	6003      	str	r3, [r0, #0]
 800268e:	4620      	mov	r0, r4
 8002690:	b016      	add	sp, #88	; 0x58
 8002692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002696:	bf00      	nop
 8002698:	200000c8 	.word	0x200000c8

0800269c <_get_semihosting_exts>:
 800269c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80026a0:	4607      	mov	r7, r0
 80026a2:	4688      	mov	r8, r1
 80026a4:	4829      	ldr	r0, [pc, #164]	; (800274c <_get_semihosting_exts+0xb0>)
 80026a6:	2100      	movs	r1, #0
 80026a8:	4615      	mov	r5, r2
 80026aa:	f7ff ff9b 	bl	80025e4 <_swiopen>
 80026ae:	462a      	mov	r2, r5
 80026b0:	4604      	mov	r4, r0
 80026b2:	2100      	movs	r1, #0
 80026b4:	4638      	mov	r0, r7
 80026b6:	f7fe fed1 	bl	800145c <memset>
 80026ba:	1c63      	adds	r3, r4, #1
 80026bc:	d015      	beq.n	80026ea <_get_semihosting_exts+0x4e>
 80026be:	4620      	mov	r0, r4
 80026c0:	f7ff fe1a 	bl	80022f8 <findslot>
 80026c4:	260c      	movs	r6, #12
 80026c6:	4681      	mov	r9, r0
 80026c8:	4630      	mov	r0, r6
 80026ca:	4649      	mov	r1, r9
 80026cc:	beab      	bkpt	0x00ab
 80026ce:	4606      	mov	r6, r0
 80026d0:	4630      	mov	r0, r6
 80026d2:	f7ff fe2b 	bl	800232c <checkerror>
 80026d6:	2803      	cmp	r0, #3
 80026d8:	dd02      	ble.n	80026e0 <_get_semihosting_exts+0x44>
 80026da:	3803      	subs	r0, #3
 80026dc:	42a8      	cmp	r0, r5
 80026de:	dc08      	bgt.n	80026f2 <_get_semihosting_exts+0x56>
 80026e0:	4620      	mov	r0, r4
 80026e2:	f7ff fee9 	bl	80024b8 <_close>
 80026e6:	f04f 34ff 	mov.w	r4, #4294967295
 80026ea:	4620      	mov	r0, r4
 80026ec:	b003      	add	sp, #12
 80026ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80026f2:	2204      	movs	r2, #4
 80026f4:	eb0d 0102 	add.w	r1, sp, r2
 80026f8:	4620      	mov	r0, r4
 80026fa:	f7ff fe45 	bl	8002388 <_read>
 80026fe:	2803      	cmp	r0, #3
 8002700:	ddee      	ble.n	80026e0 <_get_semihosting_exts+0x44>
 8002702:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002706:	2b53      	cmp	r3, #83	; 0x53
 8002708:	d1ea      	bne.n	80026e0 <_get_semihosting_exts+0x44>
 800270a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800270e:	2b48      	cmp	r3, #72	; 0x48
 8002710:	d1e6      	bne.n	80026e0 <_get_semihosting_exts+0x44>
 8002712:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002716:	2b46      	cmp	r3, #70	; 0x46
 8002718:	d1e2      	bne.n	80026e0 <_get_semihosting_exts+0x44>
 800271a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800271e:	2b42      	cmp	r3, #66	; 0x42
 8002720:	d1de      	bne.n	80026e0 <_get_semihosting_exts+0x44>
 8002722:	2201      	movs	r2, #1
 8002724:	4641      	mov	r1, r8
 8002726:	4620      	mov	r0, r4
 8002728:	f7ff fe48 	bl	80023bc <_swilseek>
 800272c:	2800      	cmp	r0, #0
 800272e:	dbd7      	blt.n	80026e0 <_get_semihosting_exts+0x44>
 8002730:	462a      	mov	r2, r5
 8002732:	4639      	mov	r1, r7
 8002734:	4620      	mov	r0, r4
 8002736:	f7ff fe27 	bl	8002388 <_read>
 800273a:	4605      	mov	r5, r0
 800273c:	4620      	mov	r0, r4
 800273e:	f7ff febb 	bl	80024b8 <_close>
 8002742:	4628      	mov	r0, r5
 8002744:	f7ff fdf2 	bl	800232c <checkerror>
 8002748:	4604      	mov	r4, r0
 800274a:	e7ce      	b.n	80026ea <_get_semihosting_exts+0x4e>
 800274c:	080029c3 	.word	0x080029c3

08002750 <initialise_semihosting_exts>:
 8002750:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002752:	4d0a      	ldr	r5, [pc, #40]	; (800277c <initialise_semihosting_exts+0x2c>)
 8002754:	4c0a      	ldr	r4, [pc, #40]	; (8002780 <initialise_semihosting_exts+0x30>)
 8002756:	2100      	movs	r1, #0
 8002758:	2201      	movs	r2, #1
 800275a:	a801      	add	r0, sp, #4
 800275c:	6029      	str	r1, [r5, #0]
 800275e:	6022      	str	r2, [r4, #0]
 8002760:	f7ff ff9c 	bl	800269c <_get_semihosting_exts>
 8002764:	2800      	cmp	r0, #0
 8002766:	dd07      	ble.n	8002778 <initialise_semihosting_exts+0x28>
 8002768:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800276c:	f003 0201 	and.w	r2, r3, #1
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	602a      	str	r2, [r5, #0]
 8002776:	6023      	str	r3, [r4, #0]
 8002778:	b003      	add	sp, #12
 800277a:	bd30      	pop	{r4, r5, pc}
 800277c:	20000088 	.word	0x20000088
 8002780:	2000008c 	.word	0x2000008c

08002784 <_has_ext_stdout_stderr>:
 8002784:	b510      	push	{r4, lr}
 8002786:	4c04      	ldr	r4, [pc, #16]	; (8002798 <_has_ext_stdout_stderr+0x14>)
 8002788:	6822      	ldr	r2, [r4, #0]
 800278a:	2a00      	cmp	r2, #0
 800278c:	da01      	bge.n	8002792 <_has_ext_stdout_stderr+0xe>
 800278e:	f7ff ffdf 	bl	8002750 <initialise_semihosting_exts>
 8002792:	6820      	ldr	r0, [r4, #0]
 8002794:	bd10      	pop	{r4, pc}
 8002796:	bf00      	nop
 8002798:	2000008c 	.word	0x2000008c

0800279c <initialise_monitor_handles>:
 800279c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027a0:	b085      	sub	sp, #20
 80027a2:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8002854 <initialise_monitor_handles+0xb8>
 80027a6:	f8cd 9004 	str.w	r9, [sp, #4]
 80027aa:	2303      	movs	r3, #3
 80027ac:	2400      	movs	r4, #0
 80027ae:	9303      	str	r3, [sp, #12]
 80027b0:	f10d 0804 	add.w	r8, sp, #4
 80027b4:	9402      	str	r4, [sp, #8]
 80027b6:	2501      	movs	r5, #1
 80027b8:	4628      	mov	r0, r5
 80027ba:	4641      	mov	r1, r8
 80027bc:	beab      	bkpt	0x00ab
 80027be:	4605      	mov	r5, r0
 80027c0:	4e20      	ldr	r6, [pc, #128]	; (8002844 <initialise_monitor_handles+0xa8>)
 80027c2:	4a21      	ldr	r2, [pc, #132]	; (8002848 <initialise_monitor_handles+0xac>)
 80027c4:	6035      	str	r5, [r6, #0]
 80027c6:	4623      	mov	r3, r4
 80027c8:	f04f 31ff 	mov.w	r1, #4294967295
 80027cc:	4614      	mov	r4, r2
 80027ce:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 80027d2:	3301      	adds	r3, #1
 80027d4:	2b14      	cmp	r3, #20
 80027d6:	d1fa      	bne.n	80027ce <initialise_monitor_handles+0x32>
 80027d8:	f7ff ffd4 	bl	8002784 <_has_ext_stdout_stderr>
 80027dc:	4d1b      	ldr	r5, [pc, #108]	; (800284c <initialise_monitor_handles+0xb0>)
 80027de:	b1d0      	cbz	r0, 8002816 <initialise_monitor_handles+0x7a>
 80027e0:	f04f 0a03 	mov.w	sl, #3
 80027e4:	2304      	movs	r3, #4
 80027e6:	f8cd 9004 	str.w	r9, [sp, #4]
 80027ea:	2701      	movs	r7, #1
 80027ec:	f8cd a00c 	str.w	sl, [sp, #12]
 80027f0:	9302      	str	r3, [sp, #8]
 80027f2:	4638      	mov	r0, r7
 80027f4:	4641      	mov	r1, r8
 80027f6:	beab      	bkpt	0x00ab
 80027f8:	4683      	mov	fp, r0
 80027fa:	4b15      	ldr	r3, [pc, #84]	; (8002850 <initialise_monitor_handles+0xb4>)
 80027fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8002800:	f8c3 b000 	str.w	fp, [r3]
 8002804:	2308      	movs	r3, #8
 8002806:	f8cd a00c 	str.w	sl, [sp, #12]
 800280a:	9302      	str	r3, [sp, #8]
 800280c:	4638      	mov	r0, r7
 800280e:	4641      	mov	r1, r8
 8002810:	beab      	bkpt	0x00ab
 8002812:	4607      	mov	r7, r0
 8002814:	602f      	str	r7, [r5, #0]
 8002816:	682b      	ldr	r3, [r5, #0]
 8002818:	3301      	adds	r3, #1
 800281a:	bf02      	ittt	eq
 800281c:	4b0c      	ldreq	r3, [pc, #48]	; (8002850 <initialise_monitor_handles+0xb4>)
 800281e:	681b      	ldreq	r3, [r3, #0]
 8002820:	602b      	streq	r3, [r5, #0]
 8002822:	6833      	ldr	r3, [r6, #0]
 8002824:	6023      	str	r3, [r4, #0]
 8002826:	2600      	movs	r6, #0
 8002828:	6066      	str	r6, [r4, #4]
 800282a:	f7ff ffab 	bl	8002784 <_has_ext_stdout_stderr>
 800282e:	b130      	cbz	r0, 800283e <initialise_monitor_handles+0xa2>
 8002830:	4b07      	ldr	r3, [pc, #28]	; (8002850 <initialise_monitor_handles+0xb4>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002838:	682b      	ldr	r3, [r5, #0]
 800283a:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800283e:	b005      	add	sp, #20
 8002840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002844:	200000c0 	.word	0x200000c0
 8002848:	200000c8 	.word	0x200000c8
 800284c:	200000bc 	.word	0x200000bc
 8002850:	200000c4 	.word	0x200000c4
 8002854:	080029d9 	.word	0x080029d9

08002858 <_isatty>:
 8002858:	b570      	push	{r4, r5, r6, lr}
 800285a:	f7ff fd4d 	bl	80022f8 <findslot>
 800285e:	2509      	movs	r5, #9
 8002860:	4604      	mov	r4, r0
 8002862:	b920      	cbnz	r0, 800286e <_isatty+0x16>
 8002864:	f000 f814 	bl	8002890 <__errno>
 8002868:	6005      	str	r5, [r0, #0]
 800286a:	4620      	mov	r0, r4
 800286c:	bd70      	pop	{r4, r5, r6, pc}
 800286e:	4628      	mov	r0, r5
 8002870:	4621      	mov	r1, r4
 8002872:	beab      	bkpt	0x00ab
 8002874:	4604      	mov	r4, r0
 8002876:	2c01      	cmp	r4, #1
 8002878:	d0f7      	beq.n	800286a <_isatty+0x12>
 800287a:	f000 f809 	bl	8002890 <__errno>
 800287e:	2400      	movs	r4, #0
 8002880:	4606      	mov	r6, r0
 8002882:	2513      	movs	r5, #19
 8002884:	4628      	mov	r0, r5
 8002886:	4621      	mov	r1, r4
 8002888:	beab      	bkpt	0x00ab
 800288a:	4605      	mov	r5, r0
 800288c:	6035      	str	r5, [r6, #0]
 800288e:	e7ec      	b.n	800286a <_isatty+0x12>

08002890 <__errno>:
 8002890:	4b01      	ldr	r3, [pc, #4]	; (8002898 <__errno+0x8>)
 8002892:	6818      	ldr	r0, [r3, #0]
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	20000020 	.word	0x20000020

0800289c <_init>:
 800289c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800289e:	bf00      	nop
 80028a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028a2:	bc08      	pop	{r3}
 80028a4:	469e      	mov	lr, r3
 80028a6:	4770      	bx	lr

080028a8 <_fini>:
 80028a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028aa:	bf00      	nop
 80028ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ae:	bc08      	pop	{r3}
 80028b0:	469e      	mov	lr, r3
 80028b2:	4770      	bx	lr
